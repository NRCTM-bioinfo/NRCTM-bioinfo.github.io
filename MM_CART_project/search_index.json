[["index.html", "CAR-T therapy for multiple myeloma Chapter 1 Introduction", " CAR-T therapy for multiple myeloma Yu-Ting Dai, Shuangshuang Yang 2023-09-18 Chapter 1 Introduction This tutorial includes basic codes for CAR-T therapy of multiple myeloma project, including data pre-processing, quality control, and visualization. "],["cytokine-profiles.html", "Chapter 2 Cytokine profiles 2.1 Load packages 2.2 Data preprocessing 2.3 Visualization 2.4 Correlation", " Chapter 2 Cytokine profiles 2.1 Load packages suppressMessages({ library(dplyr) library(pheatmap) library(ggplot2) library(DESeq2) library(openxlsx) library(dendextend) library(matrixStats) library(ggpubr) library(limma) library(randomForest) library(clusterProfiler) library(genefilter) library(GSVA) library(Biobase) library(ggplot2) library(ggthemes) library(enrichplot) library(GSEABase) library(Seurat) library(monocle) }) 2.2 Data preprocessing cytokine.raw &lt;- read.xlsx(&quot;data/Fig1-luminex-rawdata.xlsx&quot;, sheet = 2, rowNames = T) cytokine.meta &lt;- read.xlsx(&quot;data/protein.meta.xlsx&quot;, sheet = 1, rowNames = F) cytokine.anno &lt;- read.xlsx(&quot;data/protein.meta.xlsx&quot;, sheet = 2, rowNames = F) rownames(cytokine.meta) &lt;- cytokine.meta$lum_num cytokine.meta$lum_num[!cytokine.meta$lum_num %in% colnames(cytokine.raw)] ## character(0) cytokine.meta$IDgroup &lt;- paste0(cytokine.meta$id, &quot;_&quot;, cytokine.meta$group) cytokine.meta$group &lt;- factor(as.character(cytokine.meta$group), levels = c(&quot;day0&quot;,&quot;day3~5&quot;,&quot;day6~9&quot;,&quot;day10~12&quot;,&quot;day13~15&quot;,&quot;day20~21&quot;)) cytokine.mat &lt;- cytokine.raw[cytokine.anno$Protein, rownames(cytokine.meta)] 2.3 Visualization color.sample &lt;- c(&quot;#A6761D&quot;, &quot;#A6CEE3&quot;, &quot;#1F78B4&quot;, &quot;#B2DF8A&quot;, &quot;#33A02C&quot;, &quot;#FB9A99&quot;, &quot;#634795&quot;, &quot;#FDBF6F&quot;, &quot;#FF7F00&quot;, &quot;#CAB2D6&quot;, &quot;#6A3D9A&quot;, &quot;#F4B3BE&quot;, &quot;#1B9E77&quot;, &quot;#D95F02&quot;, &quot;#7570B3&quot;, &quot;#E7298A&quot;, &quot;#66A61E&quot;, &quot;#E6AB02&quot;, &quot;#F4A11D&quot;, &quot;#8DC8ED&quot;, &quot;#4C6CB0&quot;, &quot;#8A1C1B&quot;, &quot;#CBCC2B&quot;, &quot;#EA644C&quot;, &quot;#E31A1C&quot;, &quot;#005B1D&quot;) names(color.sample) &lt;- unique(cytokine.meta$id) color.day &lt;- c(`day0` = &quot;#abc4d1&quot;, `day3~5` = &quot;#7278A9&quot;, `day6~9` = &quot;#BC3D9B&quot;, `day10~12` = &quot;#78CEB3&quot;, `day13~15` = &quot;#B9F1D9&quot;, `day20~21` = &quot;#AAE689&quot;) color.crs &lt;- c(`0` = &quot;#BFBFBF&quot;, `1` = &quot;#FFFF00&quot;, `2` = &quot;#FFC000&quot;, `3` = &quot;#FF6600&quot;, `4` = &quot;#C00000&quot;, `5` = &quot;#000000&quot;) color.cluster &lt;- c(C1 = &quot;#8DC8ED&quot;, C2 = &quot;#4C6CB0&quot;, C3 = &quot;#82C800&quot;, C4 = &quot;#CB50B2&quot;, C5 = &quot;#E22826&quot;) anno.color &lt;- list(id = color.sample,crs_grade = color.crs[1:4], group = color.day, Cluster = color.cluster ) my.breaks &lt;- c(seq(-4, -0.01, by = 0.001), seq(0.01, 4, by = 0.001) ) my.colors &lt;- c(colorRampPalette(colors = c(&quot;blue&quot;,&quot;white&quot;))(length(my.breaks)/2), colorRampPalette(colors = c(&quot;white&quot;,&quot;red&quot;))(length(my.breaks)/2)) plot.mat &lt;- log2(cytokine.mat[, cytokine.meta$lum_num]) - log2(cytokine.mat[, cytokine.meta$Diff]) plot.mat &lt;- plot.mat[, 27:142] anno.data.col &lt;- cytokine.meta[, c(&quot;id&quot;,&quot;crs_grade&quot;,&quot;group&quot;)] anno.data.row &lt;- data.frame(row.names = cytokine.anno$Protein, Cluster = cytokine.anno$Cluster) p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = my.colors, breaks = my.breaks, cluster_row = T, cluster_col = F, border_color = NA, annotation_col = anno.data.col, annotation_row = anno.data.row, annotation_colors = anno.color, fontsize_col = 0.1, fontsize_row = 6) p 2.4 Correlation plot.mat &lt;- log2(cytokine.mat[, cytokine.meta$lum_num]) - log2(cytokine.mat[, cytokine.meta$Diff]) plot.data &lt;- cytokine.meta plot.data$Cytokine_C0 &lt;- colMeans(plot.mat[, plot.data$lum_num]) plot.data$Cytokine_C1 &lt;- colMeans(plot.mat[cytokine.anno$Protein[which(cytokine.anno$Cluster == &quot;C1&quot;)], plot.data$lum_num]) plot.data$Cytokine_C2 &lt;- colMeans(plot.mat[cytokine.anno$Protein[which(cytokine.anno$Cluster == &quot;C2&quot;)], plot.data$lum_num]) plot.data$Cytokine_C3 &lt;- colMeans(plot.mat[cytokine.anno$Protein[which(cytokine.anno$Cluster == &quot;C3&quot;)], plot.data$lum_num]) plot.data$Cytokine_C4 &lt;- colMeans(plot.mat[cytokine.anno$Protein[which(cytokine.anno$Cluster == &quot;C4&quot;)], plot.data$lum_num]) plot.data$Cytokine_C5 &lt;- colMeans(plot.mat[cytokine.anno$Protein[which(cytokine.anno$Cluster == &quot;C5&quot;)], plot.data$lum_num]) plot.list &lt;- list() for (i in 1:5) { plot.data.sub &lt;- plot.data[which(plot.data$group != &quot;day0&quot;), ] p &lt;- ggscatter(plot.data.sub, x = &quot;mean_crs_grade&quot;, y = paste0(&quot;Cytokine_C&quot;, i), color = &quot;gray&quot;, #palette = color.group, main = paste0(&quot;Cytokine cluster CC&quot;, i), xlab = &quot;CRS level&quot;, ylab = &quot;Mean log2FC&quot;, add.params = list(color = &quot;black&quot;, fill = &quot;lightgray&quot;), conf.int = TRUE, add = &quot;reg.line&quot;) + theme_base() + stat_cor(method = &quot;pearson&quot;) p &lt;- p + theme_base() p &lt;- p + theme(plot.background = element_blank()) plot.list &lt;- c(plot.list, list(p = p) ) } p &lt;- ggarrange(plot.list[[1]], plot.list[[2]], plot.list[[3]], plot.list[[4]], plot.list[[5]], ncol = 5, nrow = 1 ) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; p "],["bulk.html", "Chapter 3 Bulk 3.1 Pre-processing 3.2 DEGs using DESeq2 3.3 DEGs using Limma 3.4 DEGs using edgeR 3.5 Mfuzz 3.6 GSEA", " Chapter 3 Bulk 3.1 Pre-processing In bulk RNA-seq analysis, Salmon was used to generate the count and transcripts per kilobase of exon model per million mapped reads (TPM) matrix. The DESeq2, limma, and edgeR packages were used to calculate differentially expressed genes (DEGs) with significance level setting as P-value &lt; 0.05. #!/bin/bash #SBATCH -p CPU # partition (queue) #SBATCH --job-name=CART #SBATCH -n 8 #SBATCH --array=1-50 #SBATCH -t 7-00:00 # time (D-HH:MM) #SBATCH -o _log/mm.%N.%A_%a.out # STDOUT #SBATCH -e _log/mm.%N.%A_%a.err # STDERR #SBATCH --mail-type=END,FAIL # notifications for job done &amp; fail #SBATCH --mail-user=XX # send-to address id=`sed -n ${SLURM_ARRAY_TASK_ID}p ../cart.sample.txt` echo &quot;${id}&quot; fq_path=${fq_path} fq1=${fq_path}/${id}_R1.fq.gz fq2=${fq_path}/${id}_R2.fq.gz gtf_file=${hg38_ref}/gencode.v37.annotation.gtf out_path=${hg38_ref}/salmon salmon_index=${hg38_ref}/gencode.v37.almon $SALMON_1_3 quant -p 40 -l IU -i ${salmon_index} -o ${out_path}/${id} -1 ${fq1} -2 ${fq2} -g ${gtf_file} --gcBias --validateMappings Then the TPM and count matrices were generated. 3.2 DEGs using DESeq2 exp &lt;- filter_count51 # test comp &lt;- c(&quot;Day0&quot;, &quot;Day3~5&quot;) pd1_com_t &lt;- pd1[pd1$group1 %in% compare_t,] exp_com_t &lt;- exp[,match(pd1_com_t$ID,colnames(exp))] Group_t &lt;- factor(pd1_com_t$group1, levels = compare_t) colData &lt;- data.frame(row.names =colnames(exp_com_t), condition=Group_t) dds &lt;- DESeqDataSetFromMatrix( countData = exp_com_t, colData = colData, design = ~ condition) dds &lt;- DESeq(dds) res &lt;- results(dds, contrast = c(&quot;condition&quot;,rev(levels(Group_t)))) resOrdered &lt;- res[order(res$pvalue),] DEG_t &lt;- as.data.frame(resOrdered) head(DEG_t) # calculation id &lt;- unique(pd1$group1)[order(unique(pd1$group1))]#由小到大排序 deg &lt;- list() n &lt;- 0 for (i in 1:(length(id)-1)){ for(is in ((i+1):length(id))){ comp &lt;- id[c(i,is)] n &lt;- n+1 pd1_com &lt;- pd1[pd1$group1 %in% comp,] exp_com &lt;- exp[,match(pd1_com$ID,colnames(exp))] Group &lt;- factor(pd1_com$group1, levels = comp) colData &lt;- data.frame(row.names =colnames(exp_com), condition=Group) dds &lt;- DESeqDataSetFromMatrix( countData = exp_com, colData = colData, design = ~ condition) dds &lt;- DESeq(dds) res &lt;- results(dds, contrast = c(&quot;condition&quot;,rev(levels(Group)))) resOrdered &lt;- res[order(res$pvalue),] deg[[n]] &lt;- as.data.frame(resOrdered) names(deg)[[n]] &lt;- paste0(comp[1],&quot;Vs&quot;,comp[2]) } } tr &lt;- c() clus &lt;- list() gene_id &lt;- rownames(exp) for (i in 1:length(deg)){ te &lt;- data.frame(Symbol=rownames(deg[[i]]),adj.P.Val=deg[[i]]$padj) colnames(te)[2] &lt;- names(deg)[[i]] clus[[i]] &lt;- te[match(gene_id,te[,1]),] names(clus)[[i]] &lt;- names(deg)[[i]] tr[i] &lt;- identical(gene_id,clus[[i]][,1]) } table(tr) deg_all &lt;- bind_cols(clus) rownames(deg_all) &lt;- gene_id deg_all &lt;- deg_all[,!str_detect(colnames(deg_all),&quot;Symbol&quot;)] pan &lt;- c() for (i in 1:length(rownames(deg_all))){ pan[i] &lt;- sum(deg_all[i,]&lt;0.05,na.rm = TRUE)&gt;0 } table(pan) deg_deseq2_ch &lt;- deg_all[pan,] 3.3 DEGs using Limma exp &lt;- filter_count51 # test comp &lt;- c(&quot;Day0&quot;, &quot;Day3~5&quot;) pd1_com &lt;- pd1[pd1$group1 %in% comp,] exp_com &lt;- exp[,match(pd1_com$ID,colnames(exp))] identical(pd1_com$ID,colnames(exp_com)) Group_t &lt;- factor(pd1_com$group1, levels =comp) Group_t Group_ts &lt;- ifelse(pd1_com$group1==comp[1],&quot;control&quot;,&quot;treat&quot;) Group_ts &lt;- factor(Group_ts, levels = c(&quot;control&quot;,&quot;treat&quot;)) Group_ts design &lt;- model.matrix(~0+Group_ts) colnames(design)=levels(Group_ts) rownames(design)=colnames(exp_com) dge &lt;- DGEList(counts=exp_com) dge &lt;- calcNormFactors(dge) v &lt;- voom(dge,design, normalize=&quot;quantile&quot;) fit &lt;- lmFit(v, design) constrasts = paste(rev(levels(Group_ts)),collapse = &quot;-&quot;) cont.matrix &lt;- makeContrasts(contrasts=constrasts,levels = design) fit2=contrasts.fit(fit,cont.matrix) fit2=eBayes(fit2) deg_t= topTable(fit2, coef=constrasts, n=Inf) test &lt;- as.data.frame(t(filter_fpkm51[rownames(filter_fpkm51)==&quot;CHI3L2&quot;,pd1_com$ID])) test$Group_t &lt;- Group_t ggplot(data = test,mapping = aes(x=Group_t,y=CHI3L2))+ geom_boxplot() ### calculation id &lt;- unique(pd1$group1)[order(unique(pd1$group1))] id deg &lt;- list() n &lt;- 0 for (i in 1:(length(id)-1)){ for(is in ((i+1):length(id))){ comp &lt;- id[c(i,is)] n &lt;- n+1 pd1_com &lt;- pd1[pd1$group1 %in% comp,] exp_com &lt;- exp[,match(pd1_com$ID,colnames(exp))] identical(pd1_com$ID,colnames(exp_com)) Group &lt;- factor(pd1_com$group1, levels =comp) Group Group_s &lt;- ifelse(pd1_com$group1==comp[1],&quot;control&quot;,&quot;treat&quot;) Group_s &lt;- factor(Group_s, levels = c(&quot;control&quot;,&quot;treat&quot;)) Group_s design &lt;- model.matrix(~0+Group_s) colnames(design)=levels(Group_s) rownames(design)=colnames(exp_com) dge &lt;- DGEList(counts=exp_com) dge &lt;- calcNormFactors(dge) v &lt;- voom(dge,design, normalize=&quot;quantile&quot;) fit &lt;- lmFit(v, design) constrasts = paste(rev(levels(Group_s)),collapse = &quot;-&quot;) cont.matrix &lt;- makeContrasts(contrasts=constrasts,levels = design) fit2=contrasts.fit(fit,cont.matrix) fit2=eBayes(fit2) deg[[n]]= topTable(fit2, coef=constrasts, n=Inf) names(deg)[[n]] &lt;- paste0(comp[1],&quot;Vs&quot;,comp[2]) } } rownames(exp) tr &lt;- c() clus &lt;- list() gene_id &lt;- rownames(exp) for (i in 1:length(deg)){ te &lt;- data.frame(Symbol=rownames(deg[[i]]),adj.P.Val=deg[[i]]$adj.P.Val)#te作为中介 colnames(te)[2] &lt;- names(deg)[[i]] clus[[i]] &lt;- te[match(gene_id,te[,1]),] names(clus)[[i]] &lt;- names(deg)[[i]] tr[i] &lt;- identical(gene_id,clus[[i]][,1]) } table(tr) deg_all &lt;- bind_cols(clus) rownames(deg_all) &lt;- gene_id deg_all &lt;- deg_all[,!str_detect(colnames(deg_all),&quot;Symbol&quot;)] pan &lt;- c() for (i in 1:length(rownames(deg_all))){ pan[i] &lt;- sum(deg_all[i,]&lt;0.05)&gt;0 } table(pan) deg_limma_ch &lt;- deg_all[pan,] 3.4 DEGs using edgeR exp &lt;- filter_count51 # test comp &lt;- c(&quot;Day0&quot;, &quot;Day3~5&quot;) pd1_com &lt;- pd1[pd1$group1 %in% comp,]#得到分组pd exp_com &lt;- exp[,match(pd1_com$ID,colnames(exp))] Group_t &lt;- factor(pd1_com$group1, levels = comp) dge &lt;- DGEList(counts=exp_com,group=Group_t) dge$samples$lib.size &lt;- colSums(dge$counts) dge &lt;- calcNormFactors(dge) design &lt;- model.matrix(~0+Group_t) rownames(design)&lt;-colnames(dge) colnames(design)&lt;-levels(Group_t) dge &lt;- estimateGLMCommonDisp(dge, design) dge &lt;- estimateGLMTrendedDisp(dge, design) dge &lt;- estimateGLMTagwiseDisp(dge, design) fit &lt;- glmFit(dge, design) fit2 &lt;- glmLRT(fit, contrast=c(-1,1)) DEG=topTags(fit2, n=nrow(exp)) deg_t=as.data.frame(DEG) # calculation id &lt;- unique(pd1$group1)[order(unique(pd1$group1))] id deg &lt;- list() n &lt;- 0 for (i in 1:(length(id)-1)){ for(is in ((i+1):length(id))){ comp &lt;- id[c(i,is)] n &lt;- n+1 pd1_com &lt;- pd1[pd1$group1 %in% comp,] exp_com &lt;- exp[,match(pd1_com$ID,colnames(exp))] Group &lt;- factor(pd1_com$group1, levels = comp) dge &lt;- DGEList(counts=exp_com,group=Group) dge$samples$lib.size &lt;- colSums(dge$counts) dge &lt;- calcNormFactors(dge) design &lt;- model.matrix(~0+Group) rownames(design)&lt;-colnames(dge) colnames(design)&lt;-levels(Group) dge &lt;- estimateGLMCommonDisp(dge, design) dge &lt;- estimateGLMTrendedDisp(dge, design) dge &lt;- estimateGLMTagwiseDisp(dge, design) fit &lt;- glmFit(dge, design) fit2 &lt;- glmLRT(fit, contrast=c(-1,1)) DEG=topTags(fit2, n=nrow(exp)) deg[[n]]=as.data.frame(DEG) names(deg)[[n]] &lt;- paste0(comp[1],&quot;Vs&quot;,comp[2]) } } tr &lt;- c() clus &lt;- list() gene_id &lt;- rownames(deg[[1]]) for (i in 1:length(deg)){ te &lt;- data.frame(Symbol=rownames(deg[[i]]),adj.P.Val=deg[[i]]$FDR)#te作为中介 colnames(te)[2] &lt;- names(deg)[[i]] clus[[i]] &lt;- te[match(gene_id,te[,1]),]#以gene_id固定相同的顺序 names(clus)[[i]] &lt;- names(deg)[[i]] tr[i] &lt;- identical(gene_id,clus[[i]][,1]) } table(tr) deg_all &lt;- bind_cols(clus) rownames(deg_all) &lt;- gene_id deg_all &lt;- deg_all[,!str_detect(colnames(deg_all),&quot;Symbol&quot;)] pan &lt;- c() for (i in 1:length(rownames(deg_all))){ pan[i] &lt;- sum(deg_all[i,]&lt;0.05,na.rm = TRUE)&gt;0 } table(pan) deg_edgeR_ch &lt;- deg_all[pan,] 3.5 Mfuzz limma_sigGene &lt;- rownames(deg_limma_ch) edgeR_sigGene &lt;- rownames(deg_edgeR_ch) DESeq2_sigGene &lt;- rownames(deg_deseq2_ch) data &lt;- list(limma=limma_sigGene, edgeR=edgeR_sigGene, DESeq2=DESeq2_sigGene) library(VennDiagram) col &lt;- c(&#39;#0099CC&#39;,&#39;#FF6666&#39;,&#39;#FFCC99&#39;) venn.diagram(data, lwd=1, lty=1, col=col, fill=col, cat.col=col, cat.cex = 1.8, rotation.degree = 0, cex=1.5, alpha = 0.5, reverse=TRUE, width=4000,height = 4000,resolution =600,margin=0.2, filename=&quot;d21_mfuzz/3DEG_venn.png&quot;,imagetype=&quot;png&quot;) sigGene3 = intersect(intersect(limma_sigGene, edgeR_sigGene), DESeq2_sigGene) eset &lt;- new(&quot;ExpressionSet&quot;,exprs = DEGs_exp_averp) eset &lt;- filter.std(eset,min.std=0) eset &lt;- standardise(eset) c &lt;-8 m &lt;- mestimate(eset) set.seed(123) cl &lt;- mfuzz(eset, c = c, m = m) cl$size sum(cl$size) gene2cluster &lt;- data.frame(gene=names(cl$cluster),cluster=cl$cluster) head(cl$membership) O &lt;- overlap(cl) Ptmp &lt;- overlap.plot(cl,over=O,thres=0.05) library(RColorBrewer) library(Mfuzz) color.2 &lt;- colorRampPalette(rev(c(&quot;#ff0000&quot;, &quot;Yellow&quot;, &quot;OliveDrab1&quot;)))(1000) mfuzz.plot2(eset,cl,mfrow=c(2,4),new.window= FALSE,centre = TRUE, time.labels=colnames(DEGs_exp_averp),colo = color.2) 3.6 GSEA clus.logfc &lt;- list() #log2fc for (i in 1:6) { clus.logfc[[i]]&lt;- deg[[i]]$log2FoldChange names(clus.logfc[[i]]) &lt;- rownames(deg[[i]]) names(clus.logfc)[i] &lt;- names(deg)[i] } i = 1 geneList &lt;- clus.logfc[[i]] geneList &lt;- sort(geneList, decreasing = T) egmt &lt;- GSEA(geneList, TERM2GENE=geneset, verbose=T,pvalueCutoff = 1) "],["scrna-seq.html", "Chapter 4 scRNA-seq 4.1 Pre-processing 4.2 Quaility control 4.3 Annotation 4.4 Markers", " Chapter 4 scRNA-seq 4.1 Pre-processing # Pre-processing data was performed using cellranger cellranger count --id=${Sample_ID} \\ --fastqs=${FASTQ} \\ --sample=${Sample_ID} \\ --transcriptome=${index_path} cellranger vdj --id={Sample_ID} \\ --reference=${index_path} \\ --fastqs=${FASTQ} \\ --sample=${Sample_ID} 4.2 Quaility control cart &lt;- CreateSeuratObject(counts = cart.data, project = &quot;cart&quot;, min.cells = 0, min.features = 0) cart[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(cart, pattern = &quot;^MT-&quot;) cart summary(cart@meta.data$percent.mt) # Visualize QC metrics as a violin plot pdf(paste0(out.path, &quot;/1.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(cart, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) dev.off() pdf(paste0(out.path, &quot;/1.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(cart, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(cart, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() cart &lt;- subset(cart, subset = nFeature_RNA &gt; 800 &amp; percent.mt &lt; 10) pdf(paste0(out.path, &quot;/2.filter.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(cart, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) dev.off() pdf(paste0(out.path, &quot;/2.filter.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(cart, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(cart, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() cart &lt;- NormalizeData(cart, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) cart &lt;- FindVariableFeatures(cart, selection.method = &quot;vst&quot;, nfeatures = 3000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(cart), 10) # plot variable features with and without labels pdf(paste0(out.path, &quot;/3.VariableFeaturePlot.pdf&quot;), width = 12, height = 7) plot1 &lt;- VariableFeaturePlot(cart) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) plot1 + plot2 dev.off() all.genes &lt;- rownames(cart) cart &lt;- ScaleData(cart, features = all.genes) cart &lt;- RunPCA(cart, features = VariableFeatures(object = cart)) p &lt;- DimPlot(cart, reduction = &quot;pca&quot;) + theme_few() ggsave(paste0(out.path, &quot;/4.PCA.pdf&quot;), p, width = 9, height = 7) ################ Combat library(gmodels) typeof(cart@reductions$pca) cart &lt;- FindVariableFeatures(cart, selection.method = &quot;vst&quot;, nfeatures = 3000) cart &lt;- ScaleData(cart) dim(cart@assays$RNA@scale.data) exp.mat &lt;- cart@assays$RNA@scale.data batch &lt;- as.numeric(as.factor(cart@meta.data$Sample)) dim(exp.mat) exp.sva &lt;- ComBat(dat=exp.mat, batch=batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE) sva.pca &lt;- fast.prcomp( exp.sva, retx = TRUE, scale. = TRUE) sva.pca &lt;- sva.pca$rotation[, 1:50] colnames(sva.pca) &lt;- paste0(&quot;PC_&quot;, 1:50) cart@reductions$svapca &lt;- cart@reductions$pca cart@reductions$svapca@cell.embeddings &lt;- sva.pca cart &lt;- FindNeighbors(cart, reduction = &quot;svapca&quot;, dims = 1:20) cart &lt;- FindClusters(cart, resolution = 1) cart &lt;- RunTSNE(cart, reduction = &quot;svapca&quot;, dims = 1:20, perplexity = 50) cart &lt;- RunUMAP(cart, reduction = &quot;svapca&quot;, dims = 1:20) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.label.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, group.by = &quot;Sample&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.sample.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, group.by = &quot;Sample&quot;, split.by = &quot;Sample&quot;, ncol = 2, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.sample.split.pdf&quot;), p, width = 14, height = 12) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, group.by = &quot;Day&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.Day.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(cart, reduction = &quot;umap&quot;, pt.size = 0.5, group.by = &quot;Day&quot;, split.by = &quot;Day&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.Day.split.pdf&quot;), p, width = 12, height = 7) 4.3 Annotation ####################### SingleR annotation ref &lt;- readRDS(file = &quot;hs.BlueprintEncodeData.RDS&quot;) pred.BlueprintEncodeData &lt;- SingleR(test = cart@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;hs.HumanPrimaryCellAtlasData.RDS&quot;) pred.HumanPrimaryCellAtlasData &lt;- SingleR(test = cart@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;ImmGenData.RDS&quot;) pred.ImmGenData &lt;- SingleR(test = cart@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;MonacoImmuneData.RDS&quot;) pred.MonacoImmuneData &lt;- SingleR(test = cart@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;NovershternHematopoieticData.RDS&quot;) pred.NovershternHematopoieticData &lt;- SingleR(test = cart@assays$RNA@data, ref = ref, labels = ref$label.main) 4.4 Markers x = 1 markers &lt;- Seurat::FindMarkers(cart, ident.1 = x) "],["about-this-project.html", "Chapter 5 About this project Current version Session Information", " Chapter 5 About this project Current version Version: 1.0.1 Release Date: 2023-09-18 Session Information # Show session information sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Ventura 13.0.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] splines stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] monocle_2.24.1 DDRTree_0.1.5 irlba_2.3.5.1 VGAM_1.1-7 ## [5] Matrix_1.5-3 SeuratObject_4.1.3 Seurat_4.3.0 GSEABase_1.58.0 ## [9] graph_1.74.0 annotate_1.74.0 XML_3.99-0.12 AnnotationDbi_1.58.0 ## [13] enrichplot_1.16.2 ggthemes_4.2.4 GSVA_1.44.5 genefilter_1.78.0 ## [17] clusterProfiler_4.4.4 randomForest_4.7-1.1 limma_3.52.4 ggpubr_0.5.0 ## [21] dendextend_1.16.0 openxlsx_4.2.5.1 DESeq2_1.36.0 SummarizedExperiment_1.26.1 ## [25] Biobase_2.56.0 MatrixGenerics_1.8.1 matrixStats_0.63.0 GenomicRanges_1.48.0 ## [29] GenomeInfoDb_1.32.4 IRanges_2.30.1 S4Vectors_0.34.0 BiocGenerics_0.42.0 ## [33] ggplot2_3.4.3 pheatmap_1.0.12 dplyr_1.1.2 ## ## loaded via a namespace (and not attached): ## [1] scattermore_0.8 tidyr_1.3.0 bit64_4.0.5 knitr_1.42 ## [5] DelayedArray_0.22.0 data.table_1.14.8 KEGGREST_1.36.3 RCurl_1.98-1.9 ## [9] generics_0.1.3 ScaledMatrix_1.4.1 leidenbase_0.1.14 cowplot_1.1.1 ## [13] RSQLite_2.2.18 combinat_0.0-8 shadowtext_0.1.2 RANN_2.6.1 ## [17] future_1.32.0 bit_4.0.5 spatstat.data_3.0-1 httpuv_1.6.9 ## [21] viridis_0.6.4 xfun_0.39 jquerylib_0.1.4 evaluate_0.20 ## [25] promises_1.2.0.1 fansi_1.0.4 igraph_1.4.2 DBI_1.1.3 ## [29] geneplotter_1.74.0 htmlwidgets_1.6.2 sparsesvd_0.2-2 spatstat.geom_3.1-0 ## [33] purrr_1.0.1 ellipsis_0.3.2 backports_1.4.1 bookdown_0.32 ## [37] deldir_1.0-6 sparseMatrixStats_1.8.0 vctrs_0.6.2 SingleCellExperiment_1.18.1 ## [41] ROCR_1.0-11 abind_1.4-5 cachem_1.0.7 withr_2.5.0 ## [45] ggforce_0.4.1 progressr_0.13.0 sctransform_0.3.5 treeio_1.20.2 ## [49] goftest_1.2-3 cluster_2.1.4 DOSE_3.22.1 ape_5.6-2 ## [53] lazyeval_0.2.2 crayon_1.5.2 spatstat.explore_3.1-0 labeling_0.4.2 ## [57] slam_0.1-50 pkgconfig_2.0.3 tweenr_2.0.2 nlme_3.1-160 ## [61] rlang_1.1.0 globals_0.16.2 lifecycle_1.0.3 miniUI_0.1.1.1 ## [65] downloader_0.4 rsvd_1.0.5 polyclip_1.10-4 lmtest_0.9-40 ## [69] aplot_0.1.8 carData_3.0-5 Rhdf5lib_1.18.2 zoo_1.8-12 ## [73] ggridges_0.5.4 png_0.1-8 viridisLite_0.4.1 bitops_1.0-7 ## [77] KernSmooth_2.23-20 rhdf5filters_1.8.0 Biostrings_2.64.1 blob_1.2.3 ## [81] DelayedMatrixStats_1.18.2 stringr_1.5.0 qvalue_2.28.0 spatstat.random_3.1-4 ## [85] parallelly_1.35.0 rstatix_0.7.1 gridGraphics_0.5-1 ggsignif_0.6.4 ## [89] beachmat_2.12.0 scales_1.2.1 memoise_2.0.1 magrittr_2.0.3 ## [93] plyr_1.8.8 ica_1.0-3 zlibbioc_1.42.0 HSMMSingleCell_1.16.0 ## [97] compiler_4.2.1 scatterpie_0.1.8 RColorBrewer_1.1-3 fitdistrplus_1.1-8 ## [101] cli_3.6.1 XVector_0.36.0 listenv_0.9.0 patchwork_1.1.2 ## [105] pbapply_1.7-0 mgcv_1.8-41 MASS_7.3-60 tidyselect_1.2.0 ## [109] stringi_1.7.12 highr_0.10 yaml_2.3.7 GOSemSim_2.22.0 ## [113] BiocSingular_1.12.0 locfit_1.5-9.8 ggrepel_0.9.3 grid_4.2.1 ## [117] sass_0.4.5 fastmatch_1.1-3 tools_4.2.1 future.apply_1.10.0 ## [121] parallel_4.2.1 rstudioapi_0.14 gridExtra_2.3 farver_2.1.1 ## [125] Rtsne_0.16 ggraph_2.1.0 digest_0.6.31 shiny_1.7.4 ## [129] qlcMatrix_0.9.7 Rcpp_1.0.10 car_3.1-1 broom_1.0.1 ## [133] later_1.3.0 RcppAnnoy_0.0.20 httr_1.4.5 colorspace_2.1-0 ## [137] tensor_1.5 reticulate_1.28 uwot_0.1.14 yulab.utils_0.0.5 ## [141] tidytree_0.4.1 spatstat.utils_3.0-2 graphlayouts_0.8.3 sp_1.6-0 ## [145] ggplotify_0.1.2 plotly_4.10.1 xtable_1.8-4 jsonlite_1.8.4 ## [149] ggtree_3.4.4 tidygraph_1.2.2 ggfun_0.0.8 R6_2.5.1 ## [153] pillar_1.9.0 htmltools_0.5.5 mime_0.12 glue_1.6.2 ## [157] fastmap_1.1.1 BiocParallel_1.30.4 codetools_0.2-18 fgsea_1.22.0 ## [161] utf8_1.2.3 lattice_0.20-45 bslib_0.4.2 spatstat.sparse_3.0-1 ## [165] tibble_3.2.1 leiden_0.4.3 zip_2.2.2 GO.db_3.15.0 ## [169] survival_3.4-0 docopt_0.7.1 rmarkdown_2.21 fastICA_1.2-3 ## [173] munsell_0.5.0 DO.db_2.9 rhdf5_2.40.0 GenomeInfoDbData_1.2.8 ## [177] HDF5Array_1.24.2 reshape2_1.4.4 gtable_0.3.3 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
