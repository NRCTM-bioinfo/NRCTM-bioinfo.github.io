[["index.html", "p53 compounds Chapter 1 Introduction", " p53 compounds Yu-Ting Dai 2023-07-24 Chapter 1 Introduction p53 is a tumor suppressor protein that plays a crucial role in regulating cell growth, DNA repair, and apoptosis (programmed cell death). Mutant p53 proteins often lose their tumor-suppressive abilities and may acquire oncogenic properties that contribute to cancer development and progression. Therefore, rescuing or restoring the normal function of p53 is a promising strategy for cancer therapy. There are several approaches to rescue p53 function in cancer cells. One common approach is the use of small molecule compounds that can restore the wild-type conformation and activity of mutant p53. These compounds, known as p53 rescue compounds, work by binding to the mutant p53 protein, inducing conformational changes, and promoting its proper folding and functional activity. In this tutorial, we provided the source code to evaluate pharmacological rescue of mutant p53. "],["data-preprocessing.html", "Chapter 2 Data Preprocessing 2.1 RNA-seq data 2.2 GEO data 2.3 Source data 2.4 TCGA data", " Chapter 2 Data Preprocessing 2.1 RNA-seq data The expression matrix of ATO and PAT was generated from raw RNA-sequencing data (FASTQ format) using salmon (https://salmon.readthedocs.io/en/latest/salmon.html). #!/bin/bash #SBATCH -p SVC # partition (queue) #SBATCH --job-name=p53 #SBATCH -n 8 #SBATCH --array=1-10 #SBATCH -t 7-00:00 # time (D-HH:MM) #SBATCH -o _log/salmon.%N.%A_%a.out # STDOUT #SBATCH -e _log/salmon.%N.%A_%a.err # STDERR #SBATCH --mail-type=END,FAIL # notifications for job done &amp; fail #SBATCH --mail-user=XX id=`sed -n ${SLURM_ARRAY_TASK_ID}p sample.txt` echo &quot;${id}&quot; fq_path=${path_to_fastq} fq1=${fq_path}/${id}_R1.fq.gz fq2=${fq_path}/${id}_R2.fq.gz gtf_file=${path_to_reference}/gencode.v40.annotation.gtf salmon_index=${path_to_reference}/gencode.v40_salmon-1.8 out_path=${out_path} $SALMON_1_8 quant -p 8 -l IU -i ${salmon_index} -o ${out_path}/${id} -1 ${fq1} -2 ${fq2} -g ${gtf_file} --gcBias --validateMappings The raw expression of RNA-seq data generated using salmon could be downloaded via https://github.com/NRCTM-bioinfo/p53_compounds. The Log2(FPKM + 1) was used for evaluation. 2.2 GEO data The GEOquery was used for downloading of GEO-based expression data. # Download GEO data using GEOquery # Taking GSE15658 as an example seq.name.list &lt;- c(&quot;GSE15658&quot;) for (i in 1:length(seq.name.list)) { seq.name = seq.name.list[i] message(i , &quot; &quot;, seq.name) gset &lt;- getGEO(seq.name, GSEMatrix = TRUE, AnnotGPL = TRUE, getGPL = TRUE ) save(gset, file = paste0( seq.name, &quot;.geo.rds&quot;)) } # load GEO and and perform average intensity load(paste0(&quot;geo/GSE15658.geo.rds&quot;)) exprset &lt;- exprs(gset[[1]]) pdata &lt;- pData(gset[[1]]) fdata &lt;- fData(gset[[1]]) exprset &lt;- na.omit(exprset) fdata &lt;- fdata[match(rownames(exprset), fdata[, 1]), ] exprset &lt;- exprset - min(exprset) sum(row.names(exprset) != fdata[, &quot;ID&quot;]) exp_mat &lt;- aggregate(exprset, list(Symbol = fdata[, &quot;Gene symbol&quot;]), mean) exp_mat &lt;- exp_mat[exp_mat$Symbol != &quot;&quot;, ] rownames(exp_mat) &lt;- exp_mat$Symbol exp_mat$Symbol &lt;- NULL exp_mat &lt;- normalizeBetweenArrays(exp_mat) # For the dataset GSE137574, we used anovar to perform annotation. load(paste0(&quot;geo/GSE137574.geo.rds&quot;)) exprset &lt;- exprs(gset[[1]]) pdata &lt;- pData(gset[[1]]) fdata &lt;- fData(gset[[1]]) exprset &lt;- na.omit(exprset) fdata &lt;- fdata[match(rownames(exprset), fdata[, 1]), ] exprset &lt;- exprset - min(exprset) dim(fdata[which(fdata$unigene != &quot;---&quot;), ]) out.data &lt;- fdata[which(fdata$unigene != &quot;---&quot;), ] out.data &lt;- out.data[, c(&quot;seqname&quot;,&quot;start&quot;,&quot;stop&quot;,&quot;strand&quot;,&quot;probeset_id&quot;,&quot;ID&quot;)] out.data$strand = &quot;0&quot; out.data$probeset_id = &quot;-&quot; write.table(out.data, &quot;geo/GSE137574.avinput&quot;, row.names = F, col.names = F, sep = &quot;\\t&quot;, quote = F) &quot;table_annovar.pl GSE137574.avinput /public/home/daiyt/bin/annovar/annovar/humandb -buildver hg19 -out GSE137574.anno -remove -protocol refGene -operation g -nastring . &quot; out.data &lt;- read.table(&quot;geo/GSE137574.anno.hg19_multianno.txt&quot;, header = T, sep = &quot;\\t&quot;) out.data$Gene &lt;- str_replace_all(out.data$Gene.refGene, regex(&quot;;.+&quot;), &quot;&quot;) fdata &lt;- fdata[which(fdata$unigene != &quot;---&quot;), ] sum(fdata$start != out.data$Start) exprset &lt;- exprset[fdata$ID, ] fdata$GeneSymbol &lt;- out.data$Gene sum(row.names(exprset) != fdata[, &quot;ID&quot;]) exp_mat &lt;- aggregate(exprset, list(Symbol = fdata[, &quot;GeneSymbol&quot;]), mean) exp_mat &lt;- exp_mat[exp_mat$Symbol != &quot;&quot;, ] rownames(exp_mat) &lt;- exp_mat$Symbol exp_mat$Symbol &lt;- NULL exp_mat &lt;- log2(exp_mat) The raw data of array-based GEO data could be downloaded via https://github.com/NRCTM-bioinfo/p53_compounds. 2.3 Source data One dataset (COTI-2 compound using RNA-seq) was downloaded directly from the supplementary data provided by the original article. plot.data &lt;- read.xlsx(&quot;COTI-2.xlsx&quot;) plot.data &lt;- plot.data[match(unique(plot.data$Symbol), plot.data$Symbol), ] plot.data &lt;- plot.data[which(!is.na(plot.data$Symbol)), ] plot.mat &lt;- plot.data[, 7:30] rownames(plot.mat) &lt;- plot.data$Symbol countToFpkm &lt;- function(count, geneLength){ fpkm &lt;- apply(count, 2, function(e){ e*1000*1000000/sum(e)/geneLength }) return(fpkm) } geneLength &lt;- plot.data$TotalExonLength names(geneLength) &lt;- plot.data$Symbol exp_mat &lt;- log2(countToFpkm(as.matrix(plot.mat), geneLength) + 1) The raw data of this dataset could be downloaded via https://github.com/NRCTM-bioinfo/p53_compounds. Gene Symbol Converter We noticed some gene symbol for several datasets was old version, here we provided the source code for gene symbol transformation. rownames(exp_mat)[which(rownames(exp_mat) == &quot;WDR63&quot;)] = &quot;DNAI3&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;FAM198B&quot;)] = &quot;GASK1B&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;FAM212B&quot;)] = &quot;INKA2&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;KIAA1456&quot;)] = &quot;TRMT9B&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;LINC01314&quot;)] = &quot;CTXND1&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;MARC2&quot;)] = &quot;MTARC2&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;C11orf63&quot;)] = &quot;JHY&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;LINC00959&quot;)] = &quot;C10orf143&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;FAM155B&quot;)] = &quot;NALF2&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;FAM46C&quot;)] = &quot;TENT5C&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;FAM19A1&quot;)] = &quot;TAFA1&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;C9orf171&quot;)] = &quot;CFAP77&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;C1orf168&quot;)] = &quot;FYB2&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;ARSE&quot;)] = &quot;ARSL&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;SPERT&quot;)] = &quot;CBY2&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2AJ&quot;)] = &quot;H2AC14&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H1D&quot;)] = &quot;H1-3&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2BO&quot;)] = &quot;H2BC17&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2AE&quot;)] = &quot;H2AC8&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST3H2BB&quot;)] = &quot;H2BC26&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H3J&quot;)] = &quot;H3C12&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2AI&quot;)] = &quot;H2AC13&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2AG&quot;)] = &quot;H2AC11&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2BK&quot;)] = &quot;H2BC12&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H4H&quot;)] = &quot;H4C8&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2BJ&quot;)] = &quot;H2BC11&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2AM&quot;)] = &quot;H2AC17&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H3H&quot;)] = &quot;H3C10&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;CCDC163P&quot;)] = &quot;CCDC163&quot; rownames(exp_mat)[which(rownames(exp_mat) == &quot;HIST1H2BL&quot;)] = &quot;H2BC13&quot; 2.4 TCGA data The gene expression data and clinical data of the TCGA Pan-Cancer cohorts included in this study can be accessed through the following link: https://xenabrowser.net/datapages/ "],["target-evaluation.html", "Chapter 3 Target Evaluation 3.1 Load packages 3.2 Merge profiling 3.3 Normalization 3.4 32 confident p53 targets 3.5 116 p53 targets", " Chapter 3 Target Evaluation 3.1 Load packages library(openxlsx) library(dplyr) library(DT) library(nlme) library(DESeq2) library(SummarizedExperiment) library(openxlsx) library(dendextend) library(matrixStats) library(data.table) library(ggpubr) library(limma) library(DESeq2) library(pheatmap) library(gplots) library(survminer) library(survival) library(enrichR) library(stringr) library(ggthemes) library(fmsb) # color theme tp53.mutant &lt;- c(&quot;WT&quot;,&quot;L130V&quot;,&quot;L130F&quot;,&quot;L130R&quot;,&quot;P142L&quot;,&quot;V143M&quot;,&quot;A161T&quot;,&quot;M237V&quot;,&quot;G245D&quot;,&quot;F270I&quot;,&quot;F270V&quot;,&quot;V272A&quot;,&quot;V272M&quot;,&quot;R248Q&quot;,&quot;R273H&quot;,&quot;null&quot;) tp53.mutant.color &lt;- c(&quot;red&quot;,rep(&quot;#494949&quot;,&quot;14&quot;),&quot;#E3E3E3&quot;) names(tp53.mutant.color) &lt;- tp53.mutant anno.color &lt;- list( Mutant = tp53.mutant.color) 3.2 Merge profiling We provided the merged profiling, which could be downloaded via https://github.com/NRCTM-bioinfo/p53_compounds. tp53.targets &lt;- read.xlsx(&quot;02.Profiling/p53_targets.xlsx&quot;) rownames(tp53.targets) &lt;- tp53.targets$Gene tp53.target.g32 &lt;- tp53.targets$Gene[which(tp53.targets$LiteratureNum &gt;= 10)] tp53.target.g116 &lt;- tp53.targets$Gene merge.meta.data &lt;- read.xlsx(&quot;02.Profiling/p53_meta.xlsx&quot;, sheet = 1) merge.compare.data &lt;- read.xlsx(&quot;02.Profiling/TableS1A.xlsx&quot;, sheet = 1, startRow = 2) merge.compare.data$Sample &lt;- merge.compare.data$`Sample.name.(after.treatment)` merge.compare.data$Control &lt;- merge.compare.data$`Sample.name.(untreated.samples)` merge.compare.data$Group &lt;- str_replace(merge.compare.data$Sample, regex(&quot;_rep.$&quot;), &quot;&quot;) rownames(merge.compare.data) &lt;- merge.compare.data$`Sample.name.(after.treatment)` merge.mat &lt;- read.xlsx(&quot;02.Profiling/TableS1B.xlsx&quot;, sheet = 1, startRow = 3, rowNames = T) 3.3 Normalization # Median normalization merge.nor.mat &lt;- merge.mat sub.1 &lt;- aggregate(colMedians(as.matrix(merge.nor.mat)), list(Cell = merge.meta.data$Dataset), min) for (i in 1:ncol(merge.nor.mat)) { merge.nor.mat[, i] &lt;- merge.nor.mat[, i] - sub.1$x[which(sub.1$Cell == merge.meta.data$Dataset[i])] } # Generation of fold change (Log2-transformed for FPKM) of cell line samples after treatment compared to before treatment compare.mat &lt;- NULL for (i in 1:nrow(merge.compare.data)) { if (length(grep(&quot;; &quot;, merge.compare.data$Control[i])) &gt; 0) { sub.1 &lt;- unlist(str_split(merge.compare.data$Control[i], &quot;; &quot;)) sub &lt;- merge.nor.mat[, merge.compare.data$Sample[i]] - rowMeans(merge.nor.mat[, sub.1]) } else { sub &lt;- merge.nor.mat[, merge.compare.data$Sample[i]] - merge.nor.mat[, merge.compare.data$Control[i]] } compare.mat &lt;- cbind(compare.mat, sub) } colnames(compare.mat) &lt;- merge.compare.data$Sample head(compare.mat, 3) ## U937_WT U937_L130V_ATO U937_L130F_ATO U937_L130R_ATO U937_P142L_ATO U937_V143M_ATO U937_M237V_ATO U937_F270I_ATO U937_F270V_ATO ## CDKN1A 3.1916457 3.080478 1.957199 2.0917992 0.7774611 2.1667723 1.9077609 3.947027 2.909291 ## RRM2B 0.8391627 1.001993 1.187001 0.6459767 0.4785670 0.8683713 0.5825729 1.860397 1.479516 ## MDM2 2.7245150 2.028156 1.302068 1.1567997 0.8098108 1.5695778 1.3455218 2.642251 2.444877 ## U937_V272A_ATO U937_V272M_ATO U937_V272M_PAT Kasumi-1_R248Q_Kevetrin_6h_rep1 Kasumi-1_R248Q_Kevetrin_6h_rep2 ## CDKN1A 2.035912 3.675682 3.269377 -0.00507247 -0.03563892 ## RRM2B 0.708025 1.567485 1.557309 0.66265896 0.57210179 ## MDM2 1.671464 3.256886 2.245890 0.04900353 -0.04690794 ## Kasumi-1_R248Q_Kevetrin_6h_rep3 SKM1_R248Q_APR-246_rep1 SKM1_R248Q_APR-246_rep2 SKM1_R248Q_APR-246_rep3 staET7.1_R273H_APR-246_rep1 ## CDKN1A 0.17165276 -0.07281667 0.02994333 -0.26504667 0.4066695 ## RRM2B 0.51180155 0.13078333 0.05577333 -0.27296667 0.6471832 ## MDM2 -0.01286232 0.18355667 -0.07633333 -0.09720333 0.2011240 ## staET7.1_R273H_APR-246_rep2 staET7.2_R273H_APR-246_rep1 staET7.3_R273H_APR-246_rep1 staET7.3_R273H_APR-246_rep2 ## CDKN1A -0.31610198 -0.1298085 -0.41130580 -0.091652792 ## RRM2B 0.12121419 0.3475557 0.07482002 0.356190359 ## MDM2 -0.04862277 0.1818754 0.07292721 0.001335775 ## staET7.2_R273H_APR-246_rep2 Saos-2_R273H_APR-246_6h_rep1 Saos-2_R273H_APR-246_6h_rep2 Saos-2_R273H_APR-246_6h_rep3 ## CDKN1A 1.1191052 -0.02540054 -0.1177016 -0.534773959 ## RRM2B 0.5005976 1.05526980 1.1814193 0.431825568 ## MDM2 0.2663554 -0.08762767 0.3947754 -0.008325736 ## Saos-2_R273H_APR-246_12h_rep1 Saos-2_R273H_APR-246_12h_rep2 Saos-2_R273H_APR-246_12h_rep3 Kasumi-1_R248Q_Kevetrin_48h_rep1 ## CDKN1A -0.62120069 -0.10077979 -0.3485730 0.3656561 ## RRM2B 1.03123586 0.75826079 0.6167059 1.0807021 ## MDM2 0.06401986 0.02695217 0.0326328 -0.4937894 ## Kasumi-1_R248Q_Kevetrin_48h_rep2 Kasumi-1_R248Q_Kevetrin_48h_rep3 PCI13_G245D_COTI-2_rep1 PCI13_G245D_COTI-2_rep2 ## CDKN1A 0.6150592 0.5977127 0.7164330 0.6274429 ## RRM2B 1.0029696 1.2170216 0.1130768 -0.0679887 ## MDM2 -0.5052966 -0.2238308 0.2377859 0.2552303 ## PCI13_G245D_COTI-2_rep3 U266_A161T_PRIMA-1_rep1 U266_A161T_PRIMA-1_rep2 U937_R273H_ATO U937_R273H_PAT PCI13_G245D_CDDP_rep1 ## CDKN1A 0.647518846 0.1974164 0.4389011 0.3927590 0.1909721 -0.21575276 ## RRM2B -0.006853216 -0.2733003 -0.3027616 0.2643679 -0.1862437 -0.28507761 ## MDM2 0.341083919 -0.2199022 -0.2003108 -0.5397466 -0.4929459 0.06734607 ## PCI13_G245D_CDDP_rep2 PCI13_G245D_CDDP_rep3 8266R5_null_PRIMA-1_rep1 8266R5_null_PRIMA-1_rep2 Saos-2_null_APR-246_6h_rep1 ## CDKN1A -0.29477320 -0.3104395 -0.1462286 -0.1858493 1.0204064 ## RRM2B -0.56260138 -0.4041368 -0.2320481 0.2372455 0.2411493 ## MDM2 0.07106408 0.1046652 0.2465478 0.3169312 -0.6160103 ## Saos-2_null_APR-246_6h_rep2 Saos-2_null_APR-246_6h_rep3 Saos-2_null_APR-246_12h_rep1 Saos-2_null_APR-246_12h_rep2 ## CDKN1A -0.2922208 0.16556354 -0.252144504 -0.2329088 ## RRM2B 0.4065886 -0.31879809 0.490890719 -0.4246623 ## MDM2 -0.6468282 -0.05262877 0.001146008 -0.1160399 The compare.mat was generated and provided as Table S1C. 3.4 32 confident p53 targets The heatmap plot was used for visualization of the log2-transformed fold change of 32 confident p53 targets. my.breaks &lt;- c(seq(-1.5, -0.01, by = 0.001), seq(0.01, 1.5, by = 0.001) ) my.colors &lt;- c(colorRampPalette(colors = c(&quot;#00599F&quot;,&quot;#00599F&quot;,&quot;#287dba&quot;,&quot;#62aee5&quot;,&quot;#a8dcff&quot;,&quot;white&quot;))(length(my.breaks)/2), colorRampPalette(colors = c(&quot;white&quot;,&quot;#ffca79&quot;,&quot;#ef6e51&quot;,&quot;#db1b18&quot;,&quot;#b50600&quot;,&quot;#b50600&quot;))(length(my.breaks)/2)) plot.mat &lt;- compare.mat[tp53.target.g32, ] anno.data &lt;- data.frame(row.names = merge.compare.data$Sample, Mutant = merge.compare.data$p53.status) # Visualization of the 32 confident p53 targets p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = my.colors, breaks = my.breaks, cluster_row = F, cluster_col = F, border_color = NA, annotation_col = anno.data, annotation_colors = anno.color, clustering_method = &quot;ward.D2&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 6, fontsize_row = 6) p # Visualization of the other 18,264 genes (exclude the 32 confident p53 targets) plot.mat &lt;- compare.mat[!rownames(compare.mat) %in% tp53.target.g32, ] p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = my.colors, breaks = my.breaks, cluster_row = F, cluster_col = F, border_color = NA, annotation_col = anno.data, annotation_colors = anno.color, clustering_method = &quot;ward.D2&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 6, fontsize_row = 0.1) p 3.5 116 p53 targets The heatmap plot was used for visualization of the log2-transformed fold change of the 116 p53 targets. my.breaks &lt;- c(seq(-1.5, -0.01, by = 0.001), seq(0.01, 1.5, by = 0.001) ) my.colors &lt;- c(colorRampPalette(colors = c(&quot;#00599F&quot;,&quot;#00599F&quot;,&quot;#287dba&quot;,&quot;#62aee5&quot;,&quot;#a8dcff&quot;,&quot;white&quot;))(length(my.breaks)/2), colorRampPalette(colors = c(&quot;white&quot;,&quot;#ffca79&quot;,&quot;#ef6e51&quot;,&quot;#db1b18&quot;,&quot;#b50600&quot;,&quot;#b50600&quot;))(length(my.breaks)/2)) plot.mat &lt;- compare.mat[tp53.target.g116, ] anno.data &lt;- data.frame(row.names = merge.compare.data$Sample, Mutant = merge.compare.data$p53.status) # Visualization of the 116 p53 targets p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = my.colors, breaks = my.breaks, cluster_row = F, cluster_col = F, border_color = NA, annotation_col = anno.data, annotation_colors = anno.color, clustering_method = &quot;ward.D2&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 6, fontsize_row = 2) p # Visualization of the other 18,180 genes (exclude the 116 p53 targets) plot.mat &lt;- compare.mat[!rownames(compare.mat) %in% tp53.target.g116, ] p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = my.colors, breaks = my.breaks, cluster_row = F, cluster_col = F, border_color = NA, annotation_col = anno.data, annotation_colors = anno.color, clustering_method = &quot;ward.D2&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 8, fontsize_row = 0.1) p 3.5.1 p53 transactivation plot.order &lt;- c(&quot;U937_WT&quot;,&quot;U937_L130V_ATO&quot;,&quot;U937_L130F_ATO&quot;,&quot;U937_L130R_ATO&quot;,&quot;U937_P142L_ATO&quot;,&quot;U937_V143M_ATO&quot;,&quot;U937_M237V_ATO&quot;,&quot;U937_F270I_ATO&quot;,&quot;U937_F270V_ATO&quot;,&quot;U937_V272A_ATO&quot;,&quot;U937_V272M_ATO&quot;,&quot;U937_V272M_PAT&quot;,&quot;Kasumi-1_R248Q_Kevetrin_6h&quot;,&quot;SKM1_R248Q_APR-246&quot;,&quot;staET7.1_R273H_APR-246&quot;,&quot;staET7.2_R273H_APR-246&quot;,&quot;staET7.3_R273H_APR-246&quot;,&quot;Saos-2_R273H_APR-246_6h&quot;,&quot;Saos-2_R273H_APR-246_12h&quot;,&quot;Kasumi-1_R248Q_Kevetrin_48h&quot;,&quot;PCI13_G245D_COTI-2&quot;,&quot;U266_A161T_PRIMA-1&quot;,&quot;U937_R273H_ATO&quot;,&quot;U937_R273H_PAT&quot;,&quot;PCI13_G245D_CDDP&quot;,&quot;8266R5_null_PRIMA-1&quot;,&quot;Saos-2_null_APR-246_6h&quot;,&quot;Saos-2_null_APR-246_12h&quot;) total.act &lt;- NULL total.test.cutoff &lt;- c(1.2, 1.5, 2.0) for (i in 1:length(total.test.cutoff)) { cutoff_tmp &lt;- round(log2(total.test.cutoff[i]), 2) plot.data &lt;- data.frame(Sample = colnames(compare.mat), UP_116 = colSums(compare.mat[tp53.target.g116, ] &gt; cutoff_tmp) , UP_32 = colSums(compare.mat[tp53.target.g32, ] &gt; cutoff_tmp), UP_other_116 = colSums(compare.mat[!rownames(compare.mat) %in% tp53.target.g116, ] &gt; cutoff_tmp) , UP_other_32 = colSums(compare.mat[!rownames(compare.mat) %in% tp53.target.g32, ] &gt; cutoff_tmp) ) plot.data$Mutant &lt;- merge.compare.data$p53.status[match(plot.data$Sample, merge.compare.data$Sample)] plot.data$MutantType &lt;- &quot;MUT&quot; plot.data$MutantType[which(plot.data$Mutant == &quot;WT&quot;)] &lt;- &quot;WT&quot; plot.data$Act_32 &lt;- (plot.data$UP_32) / (plot.data$UP_other_32 + plot.data$UP_32) * 100 plot.data$Act_116 &lt;- (plot.data$UP_116) / (plot.data$UP_other_116 + plot.data$UP_116) * 100 plot.data$Group &lt;- merge.compare.data$Group[match(plot.data$Sample, merge.compare.data$Sample)] plot.data$Act_32[which(is.na(plot.data$Act_32))] = 1 plot.data$Act_116[which(is.na(plot.data$Act_116))] = 1 plot.data.group &lt;- aggregate(plot.data[, c(&quot;Act_32&quot;,&quot;Act_116&quot;)], list(Sample = plot.data$Group), mean) plot.data.group &lt;- plot.data.group[match(plot.order, plot.data.group$Sample), ] plot.data.group$Mutant &lt;- merge.compare.data$p53.status[match(plot.data.group$Sample, merge.compare.data$Group)] plot.data.group$MutantType &lt;- &quot;MUT&quot; plot.data.group$MutantType[which(plot.data.group$Mutant == &quot;null&quot;)] &lt;- &quot;null_other&quot; plot.data.group$MutantType[which(plot.data.group$Sample %in% c(&quot;U937_R273H_ATO&quot;,&quot;U937_R273H_PAT&quot;,&quot;PCI13_G245D_CDDP&quot;))] &lt;- &quot;null_other&quot; plot.data.group$MutantType[which(plot.data.group$Mutant == &quot;WT&quot;)] &lt;- &quot;WT&quot; if (cutoff_tmp != 1) { group.tag &lt;- paste0(&quot;FC_&quot;, total.test.cutoff[i] ) } else { group.tag &lt;- &quot;FC_2.0&quot; } plot.data.group$Group &lt;- group.tag total.act &lt;- rbind(total.act, plot.data.group) } total.act$Group &lt;- factor(as.character(total.act$Group), levels = c(&quot;FC_1.5&quot;,&quot;FC_1.2&quot;,&quot;FC_2.0&quot;)) p &lt;- ggbarplot(total.act, x = &quot;Sample&quot;, y = &quot;Act_32&quot;, color = &quot;MutantType&quot;, fill = &quot;MutantType&quot;, sorting = &quot;none&quot;, size = 0.5, order = plot.order, main = paste0(&quot;32 confident p53 targets&quot;), xlab = &quot;&quot;, ylab = &quot;&quot;, palette = c(&quot;black&quot;,&quot;#A3A3A3&quot;,&quot;red&quot;), width = 0.6 ) + theme_few() p &lt;- p + geom_hline(yintercept = 0, linetype = 2, color = &quot;black&quot;) p &lt;- p + theme_base() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 4)) p &lt;- p + theme(plot.background = element_blank()) p &lt;- p + scale_y_continuous(limits = c(0,11) ) p &lt;- p + facet_wrap( ~ Group, ncol = 3) p p &lt;- ggbarplot(total.act, x = &quot;Sample&quot;, y = &quot;Act_116&quot;, color = &quot;MutantType&quot;, fill = &quot;MutantType&quot;, sorting = &quot;none&quot;, size = 0.5, order = plot.order, main = paste0(&quot;116 p53 targets&quot;), xlab = &quot;&quot;, ylab = &quot;&quot;, palette = c(&quot;black&quot;,&quot;#A3A3A3&quot;,&quot;red&quot;), width = 0.6 ) + theme_few() p &lt;- p + geom_hline(yintercept = 0, linetype = 2, color = &quot;black&quot;) p &lt;- p + theme_base() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 4)) p &lt;- p + theme(plot.background = element_blank()) p &lt;- p + scale_y_continuous(limits = c(0,15) ) p &lt;- p + facet_wrap( ~ Group, ncol = 3) p "],["enrichment-analysis.html", "Chapter 4 Enrichment analysis 4.1 Calculated DEGs 4.2 Enrichr analysis 4.3 MSigDB Hallmark 4.4 KEGG 4.5 TRRUST", " Chapter 4 Enrichment analysis 4.1 Calculated DEGs The differentially expressed genes (DEGs) was calculated using FC &gt; 1.5 (log2FC &gt; 0.58). websiteLive &lt;- TRUE dbs &lt;- listEnrichrDbs() if (websiteLive) head(dbs) gene.enrich &lt;- list() compare.group &lt;- unique(merge.compare.data$Group) for (i in 1:length(compare.group) ) { sub.sample &lt;- merge.compare.data[which(merge.compare.data$Group == compare.group[i]), ] if (nrow(sub.sample) == 1) { sub &lt;- rownames(compare.mat[which(compare.mat[, sub.sample$Sample] &gt; 0.58 ), ]) } else { sub &lt;- rownames(compare.mat[which(rowMeans(compare.mat[, sub.sample$Sample]) &gt; 0.58 ), ]) } gene.enrich &lt;- c(gene.enrich, list(sub = sub)) } names(gene.enrich) &lt;- compare.group 4.2 Enrichr analysis Enrichment analysis was conducted by Enrichr (https://maayanlab.cloud/Enrichr/). enrichr.total &lt;- NULL enrichr.db.name &lt;- c(&quot;KEGG_2021_Human&quot;,&quot;MSigDB_Hallmark_2020&quot;,&quot;TRRUST_Transcription_Factors_2019&quot;) for (i in 1:length(gene.enrich)) { message(i, &quot; &quot;, names(gene.enrich)[i] ) enrichr.sub &lt;- enrichr(gene.enrich[[i]], enrichr.db.name) enrichr.sub$`KEGG_2021_Human`$Database &lt;- &quot;KEGG_2021_Human&quot; enrichr.sub$`MSigDB_Hallmark_2020`$Database &lt;- &quot;MSigDB_Hallmark_2020&quot; enrichr.sub$`TRRUST_Transcription_Factors_2019`$Database &lt;- &quot;TRRUST_Transcription_Factors_2019&quot; sub &lt;- rbind(enrichr.sub$`KEGG_2021_Human`, enrichr.sub$`MSigDB_Hallmark_2020`, enrichr.sub$`TRRUST_Transcription_Factors_2019` ) sub$Sample &lt;- names(gene.enrich)[i] enrichr.total &lt;- rbind(enrichr.total, sub) } ## 1 U937_WT ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 2 U937_L130V_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 3 U937_L130F_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 4 U937_L130R_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 5 U937_P142L_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 6 U937_V143M_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 7 U937_M237V_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 8 U937_F270I_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 9 U937_F270V_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 10 U937_V272A_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 11 U937_V272M_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 12 U937_V272M_PAT ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 13 Kasumi-1_R248Q_Kevetrin_6h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 14 SKM1_R248Q_APR-246 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 15 staET7.1_R273H_APR-246 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 16 staET7.2_R273H_APR-246 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 17 staET7.3_R273H_APR-246 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 18 Saos-2_R273H_APR-246_6h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 19 Saos-2_R273H_APR-246_12h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 20 Kasumi-1_R248Q_Kevetrin_48h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 21 PCI13_G245D_COTI-2 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 22 U266_A161T_PRIMA-1 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 23 U937_R273H_ATO ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 24 U937_R273H_PAT ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 25 PCI13_G245D_CDDP ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 26 8266R5_null_PRIMA-1 ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 27 Saos-2_null_APR-246_6h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. ## 28 Saos-2_null_APR-246_12h ## Uploading data to Enrichr... Done. ## Querying KEGG_2021_Human... Done. ## Querying MSigDB_Hallmark_2020... Done. ## Querying TRRUST_Transcription_Factors_2019... Done. ## Parsing results... Done. plot.data &lt;- enrichr.total[which(enrichr.total$P.value &lt; 0.05), ] plot.data &lt;- plot.data[-grep(&quot; mouse$&quot;, plot.data$Term), ] plot.data$Old.P.value &lt;- NULL plot.data$Old.Adjusted.P.value &lt;- NULL plot.data$Count &lt;- as.numeric(str_replace_all(plot.data$Overlap, regex(&quot;/.+&quot;), &quot;&quot;)) plot.data &lt;- plot.data[which(plot.data$Count &gt;= 10), ] plot.data$Sample &lt;- factor(as.character(plot.data$Sample), levels = names(gene.enrich)) plot.data &lt;- plot.data[order(plot.data$Sample, plot.data$Database, plot.data$P.value), ] plot.data$Rank &lt;- NA for (i in 1:length(names(gene.enrich))) { for (j in 1:length(enrichr.db.name)) { idx &lt;- which(plot.data$Database == enrichr.db.name[j] &amp; plot.data$Sample == names(gene.enrich)[i]) if (length(idx) &gt; 0) plot.data$Rank[idx] = 1:length(idx) } } plot.data &lt;- plot.data[, c(&quot;Sample&quot;,&quot;Term&quot;,&quot;Count&quot;,&quot;Overlap&quot;,&quot;P.value&quot;,&quot;Adjusted.P.value&quot;,&quot;Odds.Ratio&quot;,&quot;Combined.Score&quot;,&quot;Genes&quot;,&quot;Rank&quot;,&quot;Database&quot;)] 4.3 MSigDB Hallmark plot.info &lt;- plot.data[which(plot.data$Database == &quot;MSigDB_Hallmark_2020&quot;), ] plot.info.sub &lt;- plot.info %&gt;% group_by(Sample) %&gt;% top_n(n = -2, wt = Rank) plot.info.sub$Rank &lt;- plot.info.sub$Rank %&gt;% as.factor() p &lt;- ggplot(plot.info.sub, aes(x = Sample, y = Term, fill = Rank, color = Rank)) + geom_point(size = 5) p &lt;- p + scale_color_manual(values = c(`1` = &quot;black&quot;, `2` = &quot;#a3a3a3&quot;) ) p &lt;- p + scale_x_discrete(limits = plot.order) p &lt;- p + scale_y_discrete(limits = rev(c(&quot;p53 Pathway&quot;,&quot;Apoptosis&quot;,&quot;TNF-alpha Signaling via NF-kB&quot;,&quot;Interferon Gamma Response&quot;,&quot;Interferon Alpha Response&quot;,&quot;Inflammatory Response&quot;,&quot;Coagulation&quot;,&quot;Complement&quot;,&quot;E2F Targets&quot;,&quot;Hypoxia&quot;,&quot;Estrogen Response Early&quot;,&quot;Estrogen Response Late&quot;,&quot;KRAS Signaling Dn&quot;,&quot;KRAS Signaling Up&quot;,&quot;mTORC1 Signaling&quot;,&quot;Myogenesis&quot;,&quot;Unfolded Protein Response&quot;,&quot;Xenobiotic Metabolism&quot;)) ) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p &lt;- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10, color = &quot;black&quot;)) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;MSigDB Hallmark 2020&quot;) p 4.4 KEGG plot.info &lt;- plot.data[which(plot.data$Database == &quot;KEGG_2021_Human&quot;), ] plot.info.sub &lt;- plot.info %&gt;% group_by(Sample) %&gt;% top_n(n = -2, wt = Rank) plot.info.sub$Rank &lt;- plot.info.sub$Rank %&gt;% as.factor() p &lt;- ggplot(plot.info.sub, aes(x = Sample, y = Term, fill = Rank, color = Rank)) + geom_point(size = 5) p &lt;- p + scale_color_manual(values = c(`1` = &quot;black&quot;, `2` = &quot;#a3a3a3&quot;) ) p &lt;- p + scale_x_discrete(limits = plot.order) p &lt;- p + scale_y_discrete(limits = rev(c(&quot;p53 signaling pathway&quot;,&quot;Lysosome&quot;,&quot;NOD-like receptor signaling pathway&quot;,&quot;Osteoclast differentiation&quot;,&quot;Mineral absorption&quot;,&quot;Complement and coagulation cascades&quot;,&quot;Cytokine-cytokine receptor interaction&quot;,&quot;Neuroactive ligand-receptor interaction&quot;,&quot;Colorectal cancer&quot;,&quot;Pathways in cancer&quot;,&quot;Herpes simplex virus 1 infection&quot;,&quot;Coronavirus disease&quot;,&quot;Epstein-Barr virus infection&quot;,&quot;Human T-cell leukemia virus 1 infection&quot;,&quot;Lipid and atherosclerosis&quot;,&quot;MAPK signaling pathway&quot;,&quot;mTOR signaling pathway&quot;,&quot;Measles&quot;,&quot;Olfactory transduction&quot;,&quot;Protein processing in endoplasmic reticulum&quot;,&quot;Staphylococcus aureus infection&quot;,&quot;Viral protein interaction with cytokine and cytokine receptor&quot;)) ) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p &lt;- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10, color = &quot;black&quot;)) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;KEGG 2021 Human&quot;) p 4.5 TRRUST plot.info &lt;- plot.data[which(plot.data$Database == &quot;TRRUST_Transcription_Factors_2019&quot;), ] plot.info.sub &lt;- plot.info %&gt;% group_by(Sample) %&gt;% top_n(n = -2, wt = Rank) plot.info.sub$Rank &lt;- plot.info.sub$Rank %&gt;% as.factor() p &lt;- ggplot(plot.info.sub, aes(x = Sample, y = Term, fill = Rank, color = Rank)) + geom_point(size = 5) p &lt;- p + scale_color_manual(values = c(`1` = &quot;black&quot;, `2` = &quot;#a3a3a3&quot;) ) p &lt;- p + scale_x_discrete(limits = plot.order) p &lt;- p + scale_y_discrete(limits = rev(c(&quot;TP53 human&quot;,&quot;BRCA1 human&quot;,&quot;STAT1 human&quot;,&quot;STAT3 human&quot;,&quot;SPI1 human&quot;,&quot;NFKB1 human&quot;,&quot;JUN human&quot;,&quot;ATF4 human&quot;,&quot;RELA human&quot;,&quot;CEBPA human&quot;,&quot;CEBPB human&quot;,&quot;ETS1 human&quot;,&quot;SIRT1 human&quot;,&quot;SMAD3 human&quot;,&quot;SP1 human&quot;)) ) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p &lt;- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 10, color = &quot;black&quot;)) p &lt;- p + xlab(&quot;&quot;) + ylab(&quot;TRRUST Transcription Factors 2019&quot;) p "],["tcga-pancanatlas.html", "Chapter 5 TCGA PanCanAtlas 5.1 WT-up genes 5.2 MUT-up genes 5.3 HR of high expression 5.4 Powerfulness in regulating 5.5 HR for p53 mutations 5.6 MDM2 expression", " Chapter 5 TCGA PanCanAtlas p53 signature genes were defined as followed. p53 targets: The 116 p53 targets. WT-up gene: in at least five cohorts, expression of this gene in the samples harboring wild-type p53 is significantly higher than expression of this gene in the samples harboring highly frequent p53 mutations (Significance: fold change &gt; 1.5 &amp; adjust P &lt; 0.05; highly frequent mutations are the ones reliably inactivate p53 wild-type functions: the missense/frameshift/insertion/deletion/stop-gain/splicing mutations with &gt; 0.5% frequency). MUT-up gene: in at least five cohorts, expression of this gene in the samples harboring highly frequent p53 missense mutations is significantly higher than expression of this gene in the samples harboring wild-type p53 (Significance: fold change &gt; 1.5 &amp; adjust P &lt; 0.05; highly frequent missense mutations are the ones most likely possessing of GOF: the missense mutations with &gt; 0.5% frequency). 5.1 WT-up genes # DEGs between p53 mut (top mutations) and p53 wt enroll.data &lt;- tcga.mutation.tp53[tcga.mutation.tp53$Amino_Acid_Change %in% tp53.mut.topall$Mutation, ] total.deg &lt;- NULL for (kkk in 1:length(TCGA.ALL)) { pdata &lt;- tcga.meta sum(pdata$sample != colnames(tcga.fpkm)) pdata$contrast &lt;- &quot;other&quot; pdata$contrast[which(pdata$TP53mut == &quot;Yes&quot; &amp; pdata$project_id == TCGA.ALL[kkk] &amp; pdata$sample %in% enroll.data$Sample_ID)] &lt;- &quot;c2&quot; pdata$contrast[which(pdata$TP53mut == &quot;No&quot; &amp; pdata$project_id == TCGA.ALL[kkk] &amp; pdata$WithMutation == &quot;Yes&quot;)] &lt;- &quot;c1&quot; message(kkk, &quot; &quot;, TCGA.ALL[kkk], &quot; &quot;, sum(pdata$contrast %in% c(&quot;c1&quot;)), &quot; &quot;, sum(pdata$contrast %in% c(&quot;c2&quot;)) ) if (length(unique(pdata$contrast)) == 3 &amp; sum(table(pdata$contrast) &lt; 1) == 0 ) { pdata.sub &lt;- pdata[which(pdata$contrast != &quot;other&quot;), ] design &lt;- model.matrix(~ 0 + as.factor(contrast), data = pdata.sub) colnames(design) &lt;- str_replace_all(colnames(design), fixed(&quot;as.factor(contrast)&quot;), &quot;&quot;) contrast &lt;- makeContrasts(c1_c2 = c1 - c2, levels = design) fits &lt;- contrasts.fit(fit, contrast) ebFit &lt;- eBayes(fits) deg_sig_list &lt;- topTable(ebFit, coef = 1, adjust.method = &#39;fdr&#39;, number = Inf) deg.data &lt;- deg_sig_list[which(!is.na(deg_sig_list$P.Value)), ] deg.data$logP &lt;- -log10(deg.data$P.Value) deg.data$logFDR &lt;- -log10(deg.data$adj.P.Val) deg.data$group = &quot;zz&quot; deg.data$group[which( (deg.data$adj.P.Val &lt; 0.05) &amp; (deg.data$logFC &gt; 0.58) )] = &quot;up&quot; deg.data$group[which( (deg.data$adj.P.Val &lt; 0.05) &amp; (deg.data$logFC &lt; -0.58) )] = &quot;down&quot; deg.data$tag &lt;- paste0(&quot;TP53 wt -vs- mut&quot;) deg.data$Gene &lt;- rownames(deg.data) deg.data$Cohort &lt;- TCGA.ALL[kkk] deg.data &lt;- deg.data[which(deg.data$group != &quot;zz&quot;), ] total.deg &lt;- rbind(total.deg, deg.data) } total.deg$Cohort &lt;- factor(as.character(total.deg$Cohort), levels = TCGA.ALL) saveRDS(total.deg, &quot;03.tcga/degs_tp53_wtup_top.rds&quot;) total.deg.wtup &lt;- readRDS(&quot;03.tcga/degs_tp53_wtup_top.rds&quot;) tp53.wtup.top &lt;- table(total.deg.wtup[, c(&quot;Gene&quot;,&quot;Cohort&quot;)]) tp53.wtup.top &lt;- tp53.wtup.top[order(rowSums(tp53.wtup.top), decreasing = T), ] dim(tp53.wtup.top) ## [1] 5694 33 plot.data &lt;- NULL for (i in 1:5) { sub &lt;- data.frame(Var1 = i, Freq = sum(rowSums(tp53.wtup.top) &gt;= i)) plot.data &lt;- rbind(plot.data, sub) } p &lt;- ggbarplot(plot.data, x = &quot;Var1&quot;, y = &quot;Freq&quot;, color = &quot;black&quot;, fill = &quot;black&quot;, size = 0, label = TRUE, lab.pos = c(&quot;out&quot;), lab.size = 4, lab.vjust = -0.5, lab.hjust = 0.5, main = &quot;The p53 WT-up genes&quot;, xlab = &quot;&quot;, ylab = &quot;Gene Count&quot;) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p gene.tp53.wtup.top &lt;- row.names(tp53.wtup.top[rowSums(tp53.wtup.top) &gt;= 5, ]) length(gene.tp53.wtup.top) ## [1] 157 5.2 MUT-up genes # DEGs between p53 mut (top missense mutations) and p53 wt enroll.data &lt;- tcga.mutation.tp53[tcga.mutation.tp53$Amino_Acid_Change %in% tp53.mut.topmis$Mutation, ] table(enroll.data$Class) total.deg &lt;- NULL for (kkk in 1:length(TCGA.ALL)) { pdata &lt;- tcga.meta sum(pdata$sample != colnames(tcga.fpkm)) pdata$contrast &lt;- &quot;other&quot; pdata$contrast[which(pdata$TP53mut == &quot;Yes&quot; &amp; pdata$project_id == TCGA.ALL[kkk] &amp; pdata$sample %in% enroll.data$Sample_ID)] &lt;- &quot;c1&quot; pdata$contrast[which(pdata$TP53mut == &quot;No&quot; &amp; pdata$project_id == TCGA.ALL[kkk] &amp; pdata$WithMutation == &quot;Yes&quot;)] &lt;- &quot;c2&quot; message(kkk, &quot; &quot;, TCGA.ALL[kkk], &quot; &quot;, sum(pdata$contrast %in% c(&quot;c1&quot;)), &quot; &quot;, sum(pdata$contrast %in% c(&quot;c2&quot;)) ) if (length(unique(pdata$contrast)) == 3 &amp; sum(table(pdata$contrast) &lt; 1) == 0 ) { pdata.sub &lt;- pdata[which(pdata$contrast != &quot;other&quot;), ] design &lt;- model.matrix(~ 0 + as.factor(contrast), data = pdata.sub) colnames(design) &lt;- str_replace_all(colnames(design), fixed(&quot;as.factor(contrast)&quot;), &quot;&quot;) contrast &lt;- makeContrasts(c1_c2 = c1 - c2, levels = design) fits &lt;- contrasts.fit(fit, contrast) ebFit &lt;- eBayes(fits) deg_sig_list &lt;- topTable(ebFit, coef = 1, adjust.method = &#39;fdr&#39;, number = Inf) deg.data &lt;- deg_sig_list[which(!is.na(deg_sig_list$P.Value)), ] deg.data$logP &lt;- -log10(deg.data$P.Value) deg.data$logFDR &lt;- -log10(deg.data$adj.P.Val) deg.data$group = &quot;zz&quot; deg.data$group[which( (deg.data$adj.P.Val &lt; 0.05) &amp; (deg.data$logFC &gt; 0.58) )] = &quot;up&quot; deg.data$group[which( (deg.data$adj.P.Val &lt; 0.05) &amp; (deg.data$logFC &lt; -0.58) )] = &quot;down&quot; deg.data$tag &lt;- paste0(&quot;TP53 mut -vs- wt&quot;) deg.data$Gene &lt;- rownames(deg.data) deg.data$Cohort &lt;- TCGA.ALL[kkk] deg.data &lt;- deg.data[which(deg.data$group != &quot;zz&quot;), ] total.deg &lt;- rbind(total.deg, deg.data) } total.deg$Cohort &lt;- factor(as.character(total.deg$Cohort), levels = TCGA.ALL) saveRDS(total.deg, &quot;03.tcga/degs_tp53_mutup_top.rds&quot;) total.deg.mutup &lt;- readRDS(&quot;03.tcga/degs_tp53_misup_top.rds&quot;) tp53.mutup.top &lt;- table(total.deg.mutup[, c(&quot;Gene&quot;,&quot;Cohort&quot;)]) tp53.mutup.top &lt;- tp53.mutup.top[order(rowSums(tp53.mutup.top), decreasing = T), ] dim(tp53.mutup.top) ## [1] 5498 33 plot.data &lt;- NULL for (i in 1:5) { sub &lt;- data.frame(Var1 = i, Freq = sum(rowSums(tp53.mutup.top) &gt;= i)) plot.data &lt;- rbind(plot.data, sub) } p &lt;- ggbarplot(plot.data, x = &quot;Var1&quot;, y = &quot;Freq&quot;, color = &quot;black&quot;, fill = &quot;black&quot;, size = 0, label = TRUE, lab.pos = c(&quot;out&quot;), lab.size = 4, lab.vjust = -0.5, lab.hjust = 0.5, main = &quot;The p53 WT-up genes&quot;, xlab = &quot;&quot;, ylab = &quot;Gene Count&quot;) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p gene.tp53.mutup.top &lt;- row.names(tp53.mutup.top[rowSums(tp53.mutup.top) &gt;= 5, ]) length(gene.tp53.mutup.top) ## [1] 140 5.3 HR of high expression HR of high expression of p53 signature genes among TCGA cancer types. 5.3.1 116 p53 targets HR of high expression of the 116 p53 targets among 33 TCGA cancer cohorts. In each cohort, patients are separated by the median value of gene expression, followed by HR values calculation using the univariable Cox regression analysis. TCGA.ALL &lt;- c(&quot;TCGA-OV&quot;,&quot;TCGA-UCS&quot;,&quot;TCGA-LUSC&quot;,&quot;TCGA-ESCA&quot;,&quot;TCGA-READ&quot;,&quot;TCGA-HNSC&quot;,&quot;TCGA-PAAD&quot;,&quot;TCGA-COAD&quot;,&quot;TCGA-LUAD&quot;,&quot;TCGA-BLCA&quot;,&quot;TCGA-STAD&quot;,&quot;TCGA-LGG&quot;,&quot;TCGA-UCEC&quot;,&quot;TCGA-SARC&quot;,&quot;TCGA-BRCA&quot;,&quot;TCGA-GBM&quot;,&quot;TCGA-LIHC&quot;,&quot;TCGA-KICH&quot;,&quot;TCGA-ACC&quot;,&quot;TCGA-MESO&quot;,&quot;TCGA-DLBC&quot;,&quot;TCGA-PRAD&quot;,&quot;TCGA-CHOL&quot;,&quot;TCGA-SKCM&quot;,&quot;TCGA-CESC&quot;,&quot;TCGA-LAML&quot;,&quot;TCGA-THYM&quot;,&quot;TCGA-KIRC&quot;,&quot;TCGA-KIRP&quot;,&quot;TCGA-TGCT&quot;,&quot;TCGA-THCA&quot;,&quot;TCGA-PCPG&quot;,&quot;TCGA-UVM&quot;) plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1K.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 1:7] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$p53.targets) length(gene.list) ## [1] 116 plot.mat &lt;- matrix(0, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL plot.mat.hr &lt;- plot.mat for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] sub &lt;- sub[which(sub$P.value &lt; 0.05), ] plot.mat.hr[match(sub$p53.targets, rownames(plot.mat.hr)), i] &lt;- log2(sub$HR) sub.1 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &gt; 1), ] if (nrow(sub.1) &gt; 0) plot.mat[match(sub.1$p53.targets, rownames(plot.mat)), i] &lt;- 1 sub.2 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &lt; 1), ] if (nrow(sub.2) &gt; 0) plot.mat[match(sub.2$p53.targets, rownames(plot.mat)), i] &lt;- -1 } stat.gene &lt;- data.frame(Gene = rownames(plot.mat), SigCount = rowSums(plot.mat == -1) - rowSums(plot.mat == 1), SigHR = rowMeans(plot.mat.hr * -1) ) stat.gene &lt;- stat.gene[order(stat.gene$SigCount, stat.gene$SigHR, decreasing = T), ] stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == -1) - colSums(plot.mat == 1), SigHR = colMeans(plot.mat.hr * -1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$SigHR, decreasing = T), ] p &lt;- pheatmap(plot.mat[stat.gene$Gene, stat.cohort$Cohort], scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#00599F&quot;,&quot;#EEEEEE&quot;,&quot;#D01910&quot;))(3), cluster_row = F, cluster_col = F, border_color = NA, fontsize_col = 10, fontsize_row = 2) p 5.3.2 WT-up genes HR of high expression of the 157 WT-up genes among 33 TCGA cancer cohorts. In each cohort, patients are separated by the median value of gene expression, followed by HR values calculation using the univariable Cox regression analysis. plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1K.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 8:14] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$`WT-up.genes`) length(gene.list) ## [1] 157 plot.mat &lt;- matrix(0, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL plot.mat.hr &lt;- plot.mat for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] sub &lt;- sub[which(sub$P.value &lt; 0.05), ] plot.mat.hr[match(sub$`WT-up.genes`, rownames(plot.mat.hr)), i] &lt;- log2(sub$HR) sub.1 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &gt; 1), ] if (nrow(sub.1) &gt; 0) plot.mat[match(sub.1$`WT-up.genes`, rownames(plot.mat)), i] &lt;- 1 sub.2 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &lt; 1), ] if (nrow(sub.2) &gt; 0) plot.mat[match(sub.2$`WT-up.genes`, rownames(plot.mat)), i] &lt;- -1 } stat.gene &lt;- data.frame(Gene = rownames(plot.mat), SigCount = rowSums(plot.mat == -1) - rowSums(plot.mat == 1), SigHR = rowMeans(plot.mat.hr * -1) ) stat.gene &lt;- stat.gene[order(stat.gene$SigCount, stat.gene$SigHR, decreasing = T), ] stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == -1) - colSums(plot.mat == 1), SigHR = colMeans(plot.mat.hr * -1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$SigHR, decreasing = T), ] p &lt;- pheatmap(plot.mat[stat.gene$Gene, stat.cohort$Cohort], scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#00599F&quot;,&quot;#EEEEEE&quot;,&quot;#D01910&quot;))(3), cluster_row = F, cluster_col = F, border_color = NA, fontsize_col = 10, fontsize_row = 2) p 5.3.3 MUT-up genes HR of high expression of the 140 MUT-up genes among 33 TCGA cancer cohorts. In each cohort, patients are separated by the median value of gene expression, followed by HR values calculation using the univariable Cox regression analysis. plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1K.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 15:21] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$`MUT-up.genes`) length(gene.list) ## [1] 140 plot.mat &lt;- matrix(0, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL plot.mat.hr &lt;- plot.mat for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] sub &lt;- sub[which(sub$P.value &lt; 0.05), ] plot.mat.hr[match(sub$`MUT-up.genes`, rownames(plot.mat.hr)), i] &lt;- log2(sub$HR) sub.1 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &gt; 1), ] if (nrow(sub.1) &gt; 0) plot.mat[match(sub.1$`MUT-up.genes`, rownames(plot.mat)), i] &lt;- 1 sub.2 &lt;- sub[which(sub$P.value &lt; 0.05 &amp; sub$HR &lt; 1), ] if (nrow(sub.2) &gt; 0) plot.mat[match(sub.2$`MUT-up.genes`, rownames(plot.mat)), i] &lt;- -1 } stat.gene &lt;- data.frame(Gene = rownames(plot.mat), SigCount = rowSums(plot.mat == 1) - rowSums(plot.mat == -1), SigHR = rowMeans(plot.mat.hr * 1) ) stat.gene &lt;- stat.gene[order(stat.gene$SigCount, stat.gene$SigHR, decreasing = T), ] stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == 1) - colSums(plot.mat == -1), SigHR = colMeans(plot.mat.hr * 1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$SigHR, decreasing = T), ] p &lt;- pheatmap(plot.mat[stat.gene$Gene, stat.cohort$Cohort], scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#00599F&quot;,&quot;#EEEEEE&quot;,&quot;#D01910&quot;))(3), cluster_row = F, cluster_col = F, border_color = NA, fontsize_col = 10, fontsize_row = 2) p 5.4 Powerfulness in regulating Heatmap of fold changes of expression of the p53 signature genes between p53-wild-type and p53-mutant tumors in the TCGA Pan-Cancer Atlas. 5.4.1 116 p53 targets Heatmap of fold changes of expression of the 116 reported p53 target genes between samples with wild-type p53 and samples with frequent mutant p53 (&gt; 0.5% mutation frequency). Note the p53 mutants with &gt; 0.5% mutation frequency are the ones most likely losing wild-type functions. TCGA.ALL &lt;- c(&quot;TCGA-OV&quot;,&quot;TCGA-UCS&quot;,&quot;TCGA-LUSC&quot;,&quot;TCGA-ESCA&quot;,&quot;TCGA-READ&quot;,&quot;TCGA-HNSC&quot;,&quot;TCGA-PAAD&quot;,&quot;TCGA-COAD&quot;,&quot;TCGA-LUAD&quot;,&quot;TCGA-BLCA&quot;,&quot;TCGA-STAD&quot;,&quot;TCGA-LGG&quot;,&quot;TCGA-UCEC&quot;,&quot;TCGA-SARC&quot;,&quot;TCGA-BRCA&quot;,&quot;TCGA-GBM&quot;,&quot;TCGA-LIHC&quot;,&quot;TCGA-KICH&quot;,&quot;TCGA-ACC&quot;,&quot;TCGA-MESO&quot;,&quot;TCGA-DLBC&quot;,&quot;TCGA-PRAD&quot;,&quot;TCGA-CHOL&quot;,&quot;TCGA-SKCM&quot;,&quot;TCGA-CESC&quot;,&quot;TCGA-LAML&quot;,&quot;TCGA-THYM&quot;,&quot;TCGA-KIRC&quot;,&quot;TCGA-KIRP&quot;,&quot;TCGA-TGCT&quot;,&quot;TCGA-THCA&quot;,&quot;TCGA-PCPG&quot;,&quot;TCGA-UVM&quot;) plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1L.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 1:6] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$p53.targets) length(gene.list) ## [1] 116 plot.mat &lt;- matrix(NA, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] if (nrow(sub) &gt; 0) { plot.mat[, i] &lt;- 0 sub.1 &lt;- sub[which(sub$log2FC &gt; 0), ] if (nrow(sub.1) &gt; 0) plot.mat[sub.1$p53.targets, i] &lt;- 1 sub.2 &lt;- sub[which(sub$log2FC &gt; 0.58 &amp; sub$adj.P.Val &lt; 0.05), ] if (nrow(sub.2) &gt; 0) plot.mat[sub.2$p53.targets, i] &lt;- 2 } } stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == 2), NotSigCount = colSums(plot.mat == 1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$NotSigCount, decreasing = T), ] plot.mat &lt;- plot.mat[, stat.cohort$Cohort] p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#fffef3&quot;,&quot;#edd1ff&quot;,&quot;#984ac9&quot;))(501), cluster_row = F, cluster_col = F, border_color = NA, clustering_method = &quot;ward.D2&quot;, display_numbers = FALSE, number_format = &quot;%.f&quot;, number_color = &quot;black&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 10, fontsize_row = 1) p 5.4.2 WT-up genes Heatmap of fold changes of expression of the 157 WT-up genes between samples with wild-type p53 and samples with frequent mutant p53 (&gt; 0.5% mutation frequency). Note the p53 mutants with &gt; 0.5% mutation frequency are the ones most likely losing wild-type functions. plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1L.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 7:12] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$`WT-up.genes`) length(gene.list) ## [1] 157 plot.mat &lt;- matrix(NA, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] if (nrow(sub) &gt; 0) { plot.mat[, i] &lt;- 0 sub.1 &lt;- sub[which(sub$log2FC &gt; 0), ] if (nrow(sub.1) &gt; 0) plot.mat[sub.1$`WT-up.genes`, i] &lt;- 1 sub.2 &lt;- sub[which(sub$log2FC &gt; 0.58 &amp; sub$adj.P.Val &lt; 0.05), ] if (nrow(sub.2) &gt; 0) plot.mat[sub.2$`WT-up.genes`, i] &lt;- 2 } } stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == 2), NotSigCount = colSums(plot.mat == 1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$NotSigCount, decreasing = T), ] plot.mat &lt;- plot.mat[, stat.cohort$Cohort] p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#fffef3&quot;,&quot;#edd1ff&quot;,&quot;#984ac9&quot;))(501), cluster_row = F, cluster_col = F, border_color = NA, clustering_method = &quot;ward.D2&quot;, display_numbers = FALSE, number_format = &quot;%.f&quot;, number_color = &quot;black&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 10, fontsize_row = 1) p 5.4.3 MUT-up genes Heatmap of fold changes of expression of the 140 MUT-up genes between samples with frequent missense mutant p53 (&gt; 0.5% mutation frequency) and samples with wild-type p53. Note the frequent missense mutant p53 with &gt; 0.5% mutation frequency are the ones most likely possessing of GOF. plot.data &lt;- read.xlsx(&quot;03.tcga/TableS1L.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- plot.data[, 13:18] plot.data &lt;- plot.data[which(!is.na(plot.data$TCGA.Cohort)), ] gene.list &lt;- unique(plot.data$`MUT-up.genes`) length(gene.list) ## [1] 140 plot.mat &lt;- matrix(NA, nrow = length(gene.list), ncol = length(TCGA.ALL)) rownames(plot.mat) &lt;- gene.list colnames(plot.mat) &lt;- TCGA.ALL for (i in 1:ncol(plot.mat)) { sub &lt;- plot.data[which(plot.data$TCGA.Cohort == colnames(plot.mat)[i]), ] if (nrow(sub) &gt; 0) { plot.mat[, i] &lt;- 0 sub.1 &lt;- sub[which(sub$log2FC &gt; 0), ] if (nrow(sub.1) &gt; 0) plot.mat[sub.1$`MUT-up.genes`, i] &lt;- 1 sub.2 &lt;- sub[which(sub$log2FC &gt; 0.58 &amp; sub$adj.P.Val &lt; 0.05), ] if (nrow(sub.2) &gt; 0) plot.mat[sub.2$`MUT-up.genes`, i] &lt;- 2 } } stat.cohort &lt;- data.frame(Cohort = colnames(plot.mat), SigCount = colSums(plot.mat == 2), NotSigCount = colSums(plot.mat == 1) ) stat.cohort &lt;- stat.cohort[order(stat.cohort$SigCount, stat.cohort$NotSigCount, decreasing = T), ] plot.mat &lt;- plot.mat[, stat.cohort$Cohort] p &lt;- pheatmap(plot.mat, scale = &quot;none&quot;, color = colorRampPalette(c(&quot;#fffef3&quot;,&quot;#edd1ff&quot;,&quot;#984ac9&quot;))(501), cluster_row = F, cluster_col = F, border_color = NA, clustering_method = &quot;ward.D2&quot;, display_numbers = FALSE, number_format = &quot;%.f&quot;, number_color = &quot;black&quot;, clustering_distance_rows = &quot;manhattan&quot;, clustering_distance_cols = &quot;manhattan&quot;, fontsize_col = 10, fontsize_row = 1) p 5.5 HR for p53 mutations HR for p53 mutations in 33 TCGA cancer types. tcga.meta &lt;- read.xlsx(&quot;03.tcga/TableS1J.xlsx&quot;, sheet = 1, startRow = 2) plot.data &lt;- tcga.meta[, 1:10] plot.data &lt;- plot.data[which(plot.data$With.survival.data == 1 &amp; plot.data$Sample.type == &quot;Primary Tumor&quot; &amp; plot.data$MutationReported == &quot;Yes&quot;), ] table(plot.data$TCGA.cohort[which(plot.data$p53mut == &quot;Yes&quot;)]) %&gt;% sort(decreasing = T) ## integer(0) # select p53 mutated samples &gt; 5 TCGA.OS &lt;- c(&quot;TCGA-KICH&quot;,&quot;TCGA-KIRC&quot;,&quot;TCGA-ACC&quot;,&quot;TCGA-LAML&quot;,&quot;TCGA-UCEC&quot;,&quot;TCGA-PAAD&quot;,&quot;TCGA-LIHC&quot;,&quot;TCGA-BRCA&quot;,&quot;TCGA-HNSC&quot;,&quot;TCGA-LUAD&quot;,&quot;TCGA-KIRP&quot;,&quot;TCGA-PRAD&quot;,&quot;TCGA-CESC&quot;,&quot;TCGA-ESCA&quot;,&quot;TCGA-COAD&quot;,&quot;TCGA-BLCA&quot;,&quot;TCGA-SARC&quot;,&quot;TCGA-STAD&quot;,&quot;TCGA-OV&quot;,&quot;TCGA-MESO&quot;,&quot;TCGA-READ&quot;,&quot;TCGA-LUSC&quot;,&quot;TCGA-SKCM&quot;,&quot;TCGA-UCS&quot;,&quot;TCGA-GBM&quot;,&quot;TCGA-LGG&quot;) plot.data$OS_month_5y &lt;- plot.data$`OS.month.(5.years)` plot.data$OS_status_5y &lt;- plot.data$`OS.status.(5.years)` plot.data$p53mut &lt;- plot.data$`p53-mut` total.list &lt;- list() out.data &lt;- NULL for (j in 1:length(TCGA.OS)) { sub &lt;- plot.data[which(plot.data$TCGA.cohort == TCGA.OS[j]), ] if (length(unique(sub$p53mut)) &gt; 1) { fit &lt;- coxph(Surv(OS_month_5y, OS_status_5y) ~ p53mut, data = sub) fit.info &lt;- summary(fit) sub.p &lt;- survdiff(Surv(OS_month_5y, OS_status_5y) ~ p53mut, data = sub)$pvalue fit.info.out &lt;- c(&quot;p53&quot;, TCGA.OS[j], fit.info$conf.int[1], fit.info$conf.int[3], fit.info$conf.int[4], sub.p ) out.data &lt;- rbind(out.data, fit.info.out) } fit &lt;- survfit(Surv(OS_month_5y, OS_status_5y) ~ p53mut, data = sub) p &lt;- ggsurvplot(fit, data = sub, xlab = &#39;Time (Months)&#39;, pval = TRUE, risk.table = FALSE, risk.table.height = 0.28, conf.int.alpha = 0.05, conf.int = TRUE, surv.median.line = &#39;hv&#39;, palette = c(&quot;blue&quot;,&quot;red&quot;), axes.offset = TRUE, break.time.by = 12, xlim = c(0, 60), title= TCGA.OS[j] ) total.list &lt;- c(total.list, list(p = p)) } ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. ## Warning in .add_surv_median(p, fit, type = surv.median.line, fun = fun, : Median survival not reached. names(total.list) &lt;- TCGA.OS out.data &lt;- as.data.frame(out.data) colnames(out.data) &lt;- c(&quot;Gene&quot;, &quot;Cohort&quot;, &quot;HR&quot;, &quot;low.95&quot;, &quot;high.95&quot;, &quot;P.value&quot;) for (i in 3:6) {out.data[, i] &lt;- as.numeric(as.character(out.data[, i]))} out.data$Prognosis &lt;- &quot;Others&quot; out.data$Prognosis[which(out.data$HR &gt; 1 &amp; out.data$P.value &lt; 0.05)] &lt;- &quot;Unfavourable&quot; out.data$Prognosis[which(out.data$HR &lt; 1 &amp; out.data$P.value &lt; 0.05)] &lt;- &quot;Favourable&quot; rownames(out.data) &lt;- NULL print(out.data) p &lt;- arrange_ggsurvplots(total.list, ncol = 7, nrow = 4, print = FALSE) p 5.6 MDM2 expression Boxplot of MDM2 gene expression in TCGA Pan-Cancer Atlas. Fragments Per Kilobase of transcript per Million mapped reads (FPKM) is used for evaluating gene expression. tcga.meta &lt;- read.xlsx(&quot;03.tcga/TableS1N.xlsx&quot;, sheet = 1, startRow = 2) plot.order &lt;- aggregate(tcga.meta$MDM2.expression, list(Cohort = tcga.meta$TCGA.cohort), median) plot.order &lt;- plot.order[order(plot.order$x, decreasing = F), ] rownames(plot.order) &lt;- NULL plot.order p &lt;- ggboxplot(tcga.meta, x = &quot;TCGA.cohort&quot;, y = &quot;MDM2.expression&quot;, color = &quot;black&quot;, fill = &quot;#b2ebff&quot;, size = 0.5, width = 0.7, xlab = &quot;&quot;, ylab = &quot;MDM2 expression&quot;, order = plot.order$Cohort, main = &quot;MDM2&quot;, outlier.shape = NA, outlier.size = 1, legend = &quot;bottom&quot;) p &lt;- p + theme_base() + theme(plot.background = element_blank()) p &lt;- p + theme(axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) p 5.6.1 Radar plot Radar plots predicting treatment sensitivity of p53 rescue therapy in the indicated cancer types tcga.rank &lt;- read.xlsx(&quot;03.tcga/TableS1O.xlsx&quot;, sheet = 1, startRow = 2) tcga.rank$CohortSim &lt;- str_replace_all(tcga.rank$Cohort, &quot;TCGA-&quot;, &quot;&quot;) idx &lt;- c(&quot;Rank.(HR.of.high.expression.of.p53.targets);.data.derived.from.S1K&quot;, &quot;Rank.(HR.of.high.expression.of.WT-up.genes);.data.derived.from.S1K&quot;, &quot;Rank.(HR.of.high.expression.of.MUT-up.genes);.data.derived.from.S1K&quot;, &quot;Rank.(HR.of.p53-mut);.data.derived.from.S1M&quot;, &quot;Rank.(MDM2.expression);.data.derived.from.S1N&quot;, &quot;Rank.(Powerfulness.in.regulating.MUT-up.genes);.data.derived.from.S1L&quot;, &quot;Rank.(Powerfulness.in.regulating.WT-up.genes);.data.derived.from.S1L&quot;, &quot;Rank.(Powerfulness.in.regulating.p53.targets);.data.derived.from.S1L&quot; ) idx[!idx %in% colnames(tcga.rank)] ## character(0) par(mfrow = c(7, 5)) for (kkk in 1:nrow(tcga.rank)) { plot.mat &lt;- tcga.rank[kkk, idx ] plot.mat &lt;- rbind(rep(33, length(plot.mat)), rep(0, length(plot.mat)), plot.mat) colnames(plot.mat) &lt;- c(&quot;HR.targets&quot;,&quot;HR.WT-up&quot;,&quot;HR.MUT-up&quot;,&quot;HR.p53&quot;,&quot;MDM2&quot;,&quot;power.MUT-up&quot;,&quot;power.WT-up&quot;,&quot;power.targets&quot;) radarchart(as.data.frame(plot.mat), pcol = c( &quot;#dd0000&quot;), pfcol = scales::alpha(c(&quot;#f28926&quot;),0.5), plwd = 2, plty = 1, axistype = 1, caxislabels = seq(0, 33, 11), seg = 3, cglcol = &quot;grey&quot;, cglty = 1, cglwd = 0.8, axislabcol = &quot;black&quot;, vlcex = 1.1, pangle=c(10, 45, 120) ) title(paste0(tcga.rank$CohortSim[kkk], &quot; (&quot;, tcga.rank$Total.score[kkk], &quot;)&quot;) ) } "],["about-this-project.html", "Chapter 6 About this project Current version Session Information", " Chapter 6 About this project Current version Version: 1.1.0 Release Date: 2023-07-24 Session Information # Show session information sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Ventura 13.0.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] fmsb_0.7.3 ggthemes_4.2.4 stringr_1.5.0 enrichR_3.1 ## [5] survival_3.4-0 survminer_0.4.9 gplots_3.1.3 pheatmap_1.0.12 ## [9] limma_3.52.4 ggpubr_0.5.0 ggplot2_3.4.2 data.table_1.14.8 ## [13] dendextend_1.16.0 DESeq2_1.36.0 SummarizedExperiment_1.26.1 Biobase_2.56.0 ## [17] MatrixGenerics_1.8.1 matrixStats_0.63.0 GenomicRanges_1.48.0 GenomeInfoDb_1.32.4 ## [21] IRanges_2.30.1 S4Vectors_0.34.0 BiocGenerics_0.42.0 nlme_3.1-160 ## [25] DT_0.26 dplyr_1.1.2 openxlsx_4.2.5.1 ## ## loaded via a namespace (and not attached): ## [1] colorspace_2.1-0 ggsignif_0.6.4 rjson_0.2.21 XVector_0.36.0 rstudioapi_0.14 ## [6] farver_2.1.1 bit64_4.0.5 AnnotationDbi_1.58.0 fansi_1.0.4 codetools_0.2-18 ## [11] splines_4.2.1 cachem_1.0.7 geneplotter_1.74.0 knitr_1.42 jsonlite_1.8.4 ## [16] broom_1.0.1 km.ci_0.5-6 annotate_1.74.0 png_0.1-8 compiler_4.2.1 ## [21] httr_1.4.5 backports_1.4.1 Matrix_1.5-3 fastmap_1.1.1 cli_3.6.1 ## [26] htmltools_0.5.5 tools_4.2.1 gtable_0.3.3 glue_1.6.2 GenomeInfoDbData_1.2.8 ## [31] Rcpp_1.0.10 carData_3.0-5 jquerylib_0.1.4 vctrs_0.6.2 Biostrings_2.64.1 ## [36] xfun_0.39 lifecycle_1.0.3 gtools_3.9.4 rstatix_0.7.1 XML_3.99-0.12 ## [41] zlibbioc_1.42.0 zoo_1.8-12 scales_1.2.1 parallel_4.2.1 RColorBrewer_1.1-3 ## [46] yaml_2.3.7 curl_5.0.0 memoise_2.0.1 gridExtra_2.3 KMsurv_0.1-5 ## [51] sass_0.4.5 stringi_1.7.12 RSQLite_2.2.18 highr_0.10 genefilter_1.78.0 ## [56] caTools_1.18.2 zip_2.2.2 BiocParallel_1.30.4 rlang_1.1.0 pkgconfig_2.0.3 ## [61] bitops_1.0-7 evaluate_0.20 lattice_0.20-45 purrr_1.0.1 htmlwidgets_1.6.2 ## [66] labeling_0.4.2 bit_4.0.5 tidyselect_1.2.0 magrittr_2.0.3 bookdown_0.32 ## [71] R6_2.5.1 generics_0.1.3 DelayedArray_0.22.0 DBI_1.1.3 pillar_1.9.0 ## [76] withr_2.5.0 KEGGREST_1.36.3 abind_1.4-5 RCurl_1.98-1.9 tibble_3.2.1 ## [81] crayon_1.5.2 car_3.1-1 survMisc_0.5.6 KernSmooth_2.23-20 utf8_1.2.3 ## [86] rmarkdown_2.21 viridis_0.6.2 locfit_1.5-9.6 grid_4.2.1 blob_1.2.3 ## [91] digest_0.6.31 xtable_1.8-4 tidyr_1.3.0 munsell_0.5.0 viridisLite_0.4.1 ## [96] bslib_0.4.2 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
