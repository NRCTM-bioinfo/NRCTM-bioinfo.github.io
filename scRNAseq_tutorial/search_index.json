[["index.html", "生信分析系列培训课程（第1期） Chapter 1 About", " 生信分析系列培训课程（第1期） Yuting Dai / Chenxu Gao 2023-11-02 Chapter 1 About 转化中心生信大数据平台内部资料，请勿外传，谢谢！ "],["data.html", "Chapter 2 Data 2.1 Cell Ranger 2.2 Sample", " Chapter 2 Data Step1: 10X 单细胞文库数据使用 Cell Ranger 分析 fastq 文件 Step2: Seurat 等R包分析 Cell Ranger output 文件 2.1 Cell Ranger 运行 Cell Ranger: 超算上运行下面的脚本 脚本需根据实际情况加以修改，详见 Cell Ranger 官网和所用超算用户手册 cellranger count tutorial prebuilt human reference transcriptome wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz tar -zxvf refdata-gex-GRCh38-2020-A.tar.gz Cell Ranger codes #!/bin/bash #SBATCH -p CPU # partition (squeue) #SBATCH --job-name=Proj #SBATCH -n 40 #SBATCH -t 7-00:00 # time (D-HH:MM) #SBATCH -o scell.%N.%A_%a.out # STDOUT #SBATCH -e scell.%N.%A_%a.err # STDERR #SBATCH --mail-type=END,FAIL # notifications for job #SBATCH --mail-user=XX@xx.com # send-to address fq_path=${your_fq_path} index_path_exp=${your_index_path_exp} # 分析单细胞表达谱数据 cellranger count \\ --id=scRNA_sample \\ --fastqs=${fq_path}/scRNA_sample \\ --sample=scRNA_sample \\ --transcriptome=${index_path_exp} # 分析V(D)J测序数据 cellranger vdj \\ --id=scBCR_sample \\ --fastqs=${fq_path}/scBCR_sample \\ --sample=scBCR_sample \\ --reference=${index_path_vdj} cellranger vdj \\ --id=scTCR_sample \\ --fastqs=${fq_path}/scTCR_sample \\ --sample=scTCR_sample \\ --reference=${index_path_vdj} 2.2 Sample 本教程直接提供 Cell Ranger 预处理后的文件： CTRL_BM: 单样本，正常人骨髓单个核细胞（BMMC）单细胞文库 BALL_BM: 单样本，急性B淋巴细胞白血病骨髓单个核细胞（BMMC）单细胞文库 list.files(&quot;./data/CTRL_BM/&quot;) # &quot;barcodes.tsv.gz&quot; &quot;features.tsv.gz&quot; &quot;matrix.mtx.gz&quot; list.files(&quot;./data/BALL_BM/&quot;) # &quot;barcodes.tsv.gz&quot; &quot;features.tsv.gz&quot; &quot;matrix.mtx.gz&quot; "],["analysis.html", "Chapter 3 Analysis 3.1 CTRL_BM 3.2 BALL_BM 3.3 Integration", " Chapter 3 Analysis Step1: 分别独立分析2个单细胞文库 (详见章节3.1, 3.2) Step2: 将Step1的2个独立分析结果整合到一起分析 (详见章节3.3) 3.1 CTRL_BM library(Seurat) library(dplyr) library(Matrix) library(gplots) library(matrixStats) library(ggpubr) library(openxlsx) library(stringr) library(ggthemes) library(pheatmap) library(SingleR) library(monocle3) # devtools::install_github(&#39;cole-trapnell-lab/monocle3&#39;) library(harmony) # install.packages(&quot;harmony&quot;) #---------------------------------------------------------------------------------- # Step 1: setting #---------------------------------------------------------------------------------- rm(list = ls()) color.lib &lt;- c(&quot;#E31A1C&quot;, &quot;#55c2fc&quot;, &quot;#A6761D&quot;, &quot;#F1E404&quot;, &quot;#33A02C&quot;, &quot;#1F78B4&quot;, &quot;#FB9A99&quot;, &quot;#FDBF6F&quot;, &quot;#FF7F00&quot;, &quot;#CAB2D6&quot;, &quot;#6A3D9A&quot;, &quot;#F4B3BE&quot;, &quot;#1B9E77&quot;, &quot;#D95F02&quot;, &quot;#7570B3&quot;, &quot;#E7298A&quot;, &quot;#66A61E&quot;, &quot;#E6AB02&quot;, &quot;#F4A11D&quot;, &quot;#8DC8ED&quot;, &quot;#4C6CB0&quot;, &quot;#8A1C1B&quot;, &quot;#CBCC2B&quot;, &quot;#EA644C&quot;, &quot;#634795&quot;, &quot;#005B1D&quot;, &quot;#26418A&quot;, &quot;#CB8A93&quot;, &quot;#B2DF8A&quot;, &quot;#E22826&quot;, &quot;#A6CEE3&quot;, &quot;#F4D31D&quot;, &quot;#F4A11D&quot;, &quot;#82C800&quot;, &quot;#8B5900&quot;, &quot;#858ED1&quot;, &quot;#FF72E1&quot;, &quot;#CB50B2&quot;, &quot;#007D9B&quot;, &quot;#26418A&quot;, &quot;#8B495F&quot;, &quot;#FF394B&quot;) sample.name = &quot;CTRL_BM&quot; message(sample.name) # Set output path out.path &lt;- paste0(&quot;output/&quot;, sample.name) #system(sprintf(&quot;mkdir %s&quot;, out.path)) dir.create(out.path,recursive = T) #---------------------------------------------------------------------------------- # Step 2: Setup the Seurat Object #---------------------------------------------------------------------------------- # load data from data folder scell.data &lt;- Read10X(data.dir = paste0(&quot;data/&quot;, sample.name) ) colnames(scell.data) &lt;- str_replace_all(colnames(scell.data), &quot;1&quot;, sample.name) # Initialize the Seurat object with the raw (non-normalized data) sce &lt;- CreateSeuratObject(counts = scell.data, project = &quot;sce&quot;, min.cells = 0, min.features = 0) # Add sample information sce@meta.data$Sample = sample.name sce head(sce@meta.data) #---------------------------------------------------------------------------------- # Step 3: QC and selecting cells #---------------------------------------------------------------------------------- # key challenges: ensure that only single, live cells are included in downstream analysis ## mitochondrial gene sce[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(sce, pattern = &quot;^MT-&quot;) sce summary(sce@meta.data$percent.mt) # Visualize QC metrics as a violin plot pdf(paste0(out.path, &quot;/1.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), group.by = &quot;orig.ident&quot;, ncol = 3) dev.off() # visualize feature-feature relationships pdf(paste0(out.path, &quot;/1.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() ## QC : selecting cells sce &lt;- subset(sce, subset = nFeature_RNA &gt; 200 &amp; percent.mt &lt; 20) sce # plot after QC pdf(paste0(out.path, &quot;/2.filter.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), group.by = &quot;orig.ident&quot;, ncol = 3) dev.off() pdf(paste0(out.path, &quot;/2.filter.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 4: Normalizing the data #---------------------------------------------------------------------------------- # After removing unwanted cells from the dataset, the next step is to normalize the data. sce &lt;- NormalizeData(sce, normalization.method = &quot;LogNormalize&quot;, scale.factor = ncol(sce)) # By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in pbmc[[&quot;RNA&quot;]]@data sce[[&quot;RNA&quot;]]@data[1:20,1:5] #---------------------------------------------------------------------------------- # Step 5: Identification of highly variable features (feature selection) #---------------------------------------------------------------------------------- # We next calculate a subset of features that exhibit high cell-to-cell variation in the dataset sce &lt;- FindVariableFeatures(sce, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(sce), 10) # plot variable features with and without labels pdf(paste0(out.path, &quot;/3.VariableFeaturePlot.pdf&quot;), width = 12, height = 7) plot1 &lt;- VariableFeaturePlot(sce) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 6: Scaling the data #---------------------------------------------------------------------------------- # linear transformation: pre-processing step prior to dimensional reduction techniques like PCA all.genes &lt;- rownames(sce) sce &lt;- ScaleData(sce, features = VariableFeatures(sce)) sce &lt;- RunPCA(sce, features = VariableFeatures(object = sce)) p &lt;- DimPlot(sce, reduction = &quot;pca&quot;) + theme_few() ggsave(paste0(out.path, &quot;/4.PCA.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step 7: Cluster the cells #---------------------------------------------------------------------------------- sce &lt;- FindNeighbors(sce, reduction = &quot;pca&quot;, dims = 1:20) sce &lt;- FindClusters(sce, resolution = 0.8) #---------------------------------------------------------------------------------- # Step 8: Run non-linear dimensional reduction (UMAP/tSNE) #---------------------------------------------------------------------------------- # to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space # If you haven&#39;t installed UMAP, you can do so via reticulate::py_install(packages = # &#39;umap-learn&#39;) sce &lt;- RunTSNE(sce, reduction = &quot;pca&quot;, dims = 1:20, perplexity = 30) sce &lt;- RunUMAP(sce, reduction = &quot;pca&quot;, dims = 1:20) # plot # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.label.pdf&quot;), p, width = 8.5, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.label.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step 9: Cell cycle #---------------------------------------------------------------------------------- # build-in cell cycle genes cc.genes sce &lt;- CellCycleScoring(sce, s.features = cc.genes$s.genes, g2m.features = cc.genes$g2m.genes) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = FALSE, group.by = &quot;Phase&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.phase.pdf&quot;), p, width = 8.5, height = 7) p &lt;- VlnPlot(sce, features = &quot;S.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.S.Score.pdf&quot;), p, width = 10, height = 5) p &lt;- VlnPlot(sce, features = &quot;G2M.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.G2M.Score.pdf&quot;), p, width = 10, height = 5) #---------------------------------------------------------------------------------- # Step 10: SingleR annotation #---------------------------------------------------------------------------------- # first, load reference datasets. Then, annotate your query data based on reference datasets. ref &lt;- readRDS(file = &quot;./data/SingleR/hs.BlueprintEncodeData.RDS&quot;) pred.BlueprintEncodeData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;./data/SingleR/hs.HumanPrimaryCellAtlasData.RDS&quot;) pred.HumanPrimaryCellAtlasData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;./data/SingleR/NovershternHematopoieticData.RDS&quot;) pred.NovershternHematopoieticData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) # add annotations to meta data sce@meta.data$CellType.BlueprintEncodeData &lt;- pred.BlueprintEncodeData$labels sce@meta.data$CellType.HumanPrimaryCellAtlasData &lt;- pred.HumanPrimaryCellAtlasData$labels sce@meta.data$CellType.NovershternHematopoieticData &lt;- pred.NovershternHematopoieticData$labels # plot with annotations # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) #---------------------------------------------------------------------------------- # Step 11: Finding differentially expressed features (find marker) #---------------------------------------------------------------------------------- ident.meta &lt;- data.frame(table(sce@meta.data$seurat_clusters)) colnames(ident.meta) &lt;- c(&quot;Cluster&quot;,&quot;CellCount&quot;) write.xlsx(ident.meta, paste0(out.path, &quot;/9.CellCount.xlsx&quot;), overwrite = T) # Cluster CellCount # 0 941 # 1 604 # 2 562 # 3 539 # 4 280 # 5 208 # find marker sce &lt;- BuildClusterTree(object = sce) all.markers &lt;- FindAllMarkers(object = sce, only.pos = TRUE, logfc.threshold = 0.1, min.pct = 0.1) all.markers &lt;- all.markers[which(all.markers$p_val_adj &lt; 0.05 &amp; all.markers$avg_log2FC &gt; 0), ] write.xlsx(all.markers, paste0(out.path, &quot;/10.top.markers.xlsx&quot;), overwrite = T) # plot top 10 markers all.markers &lt;- read.xlsx(paste0(out.path, &quot;/10.top.markers.xlsx&quot;)) all.markers &lt;- all.markers[which(all.markers$pct.1 &gt; 0.25), ] top10 &lt;- all.markers %&gt;% group_by(cluster) %&gt;% top_n(n = 5, wt = avg_log2FC) gene.list &lt;- unique(top10$gene) p &lt;- DotPlot(sce, features = gene.list, dot.scale = 8, cols = c(&quot;#DDDDDD&quot;, &quot;#003366&quot; ), col.min = -2) + RotatedAxis() p &lt;- p + theme_few() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 14)) p &lt;- p + theme(axis.text.y = element_text(size = 20)) p &lt;- p + scale_size(range = c(1, 7)) p &lt;- p + gradient_color(c(&quot;#EEEEEE&quot;,&quot;#ffb459&quot;,&quot;#e8613c&quot;,&quot;#b70909&quot;)) ggsave(paste0(out.path, &quot;/10.top.markers.pdf&quot;), p, width = 20, height = 7) ## marker genes dot plot #---------------------------------------------------------------------------------- # Step 12: check wellknown markers #---------------------------------------------------------------------------------- # Expression for each cluster p &lt;- FeaturePlot(object = sce, features = c(&quot;CD34&quot;,&quot;AVP&quot;,&quot;CD14&quot;,&quot;HBB&quot;,&quot;CD19&quot;,&quot;CD79A&quot;,&quot;CD3E&quot;,&quot;CD8A&quot;,&quot;CD4&quot;), cols = c(&quot;#CCCCCC&quot;, &quot;red&quot;), pt.size = 0.3, ncol = 3, reduction = &quot;umap&quot;) ggsave(paste0(out.path, &quot;/11.featurePlot.pdf&quot;), p, width = 14, height = 12) p &lt;- VlnPlot(object = sce, features = c(&quot;CD34&quot;,&quot;AVP&quot;,&quot;CD14&quot;,&quot;HBB&quot;,&quot;CD19&quot;,&quot;CD79A&quot;,&quot;CD3E&quot;,&quot;CD8A&quot;,&quot;CD4&quot;), pt.size = 0, cols = color.lib, slot = &quot;data&quot;, ncol = 3) ggsave(paste0(out.path, &quot;/11.VlnPlot.pdf&quot;), p, width = 16, height = 10) ## save object dir.create(&quot;./output/obj&quot;,recursive = T) saveRDS(sce, paste0(&quot;./output/obj/20231011.&quot;, sample.name, &quot;.rds&quot;)) 3.2 BALL_BM 分析思路同上 library(Seurat) library(dplyr) library(Matrix) library(gplots) library(matrixStats) library(ggpubr) library(openxlsx) library(stringr) library(ggthemes) library(pheatmap) library(SingleR) library(monocle3) # devtools::install_github(&#39;cole-trapnell-lab/monocle3&#39;) library(harmony) # install.packages(&quot;harmony&quot;) #---------------------------------------------------------------------------------- # Step 1: setting #---------------------------------------------------------------------------------- rm(list = ls()) color.lib &lt;- c(&quot;#E31A1C&quot;, &quot;#55c2fc&quot;, &quot;#A6761D&quot;, &quot;#F1E404&quot;, &quot;#33A02C&quot;, &quot;#1F78B4&quot;, &quot;#FB9A99&quot;, &quot;#FDBF6F&quot;, &quot;#FF7F00&quot;, &quot;#CAB2D6&quot;, &quot;#6A3D9A&quot;, &quot;#F4B3BE&quot;, &quot;#1B9E77&quot;, &quot;#D95F02&quot;, &quot;#7570B3&quot;, &quot;#E7298A&quot;, &quot;#66A61E&quot;, &quot;#E6AB02&quot;, &quot;#F4A11D&quot;, &quot;#8DC8ED&quot;, &quot;#4C6CB0&quot;, &quot;#8A1C1B&quot;, &quot;#CBCC2B&quot;, &quot;#EA644C&quot;, &quot;#634795&quot;, &quot;#005B1D&quot;, &quot;#26418A&quot;, &quot;#CB8A93&quot;, &quot;#B2DF8A&quot;, &quot;#E22826&quot;, &quot;#A6CEE3&quot;, &quot;#F4D31D&quot;, &quot;#F4A11D&quot;, &quot;#82C800&quot;, &quot;#8B5900&quot;, &quot;#858ED1&quot;, &quot;#FF72E1&quot;, &quot;#CB50B2&quot;, &quot;#007D9B&quot;, &quot;#26418A&quot;, &quot;#8B495F&quot;, &quot;#FF394B&quot;) sample.name = &quot;BALL_BM&quot; message(sample.name) # Set output path out.path &lt;- paste0(&quot;output/&quot;, sample.name) #system(sprintf(&quot;mkdir %s&quot;, out.path)) dir.create(out.path,recursive = T) #---------------------------------------------------------------------------------- # Step 2: Setup the Seurat Object #---------------------------------------------------------------------------------- # load data from data folder scell.data &lt;- Read10X(data.dir = paste0(&quot;data/&quot;, sample.name) ) colnames(scell.data) &lt;- str_replace_all(colnames(scell.data), &quot;1&quot;, sample.name) # Initialize the Seurat object with the raw (non-normalized data) sce &lt;- CreateSeuratObject(counts = scell.data, project = &quot;sce&quot;, min.cells = 0, min.features = 0) # Add sample information sce@meta.data$Sample = sample.name sce head(sce@meta.data) #---------------------------------------------------------------------------------- # Step 3: QC and selecting cells #---------------------------------------------------------------------------------- # key challenges: ensure that only single, live cells are included in downstream analysis ## mitochondrial gene sce[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(sce, pattern = &quot;^MT-&quot;) sce summary(sce@meta.data$percent.mt) # Visualize QC metrics as a violin plot pdf(paste0(out.path, &quot;/1.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), group.by = &quot;orig.ident&quot;, ncol = 3) dev.off() # visualize feature-feature relationships pdf(paste0(out.path, &quot;/1.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() ## QC : selecting cells sce &lt;- subset(sce, subset = nFeature_RNA &gt; 200 &amp; percent.mt &lt; 20) sce # plot after QC pdf(paste0(out.path, &quot;/2.filter.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), group.by = &quot;orig.ident&quot;, ncol = 3) dev.off() pdf(paste0(out.path, &quot;/2.filter.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 4: Normalizing the data #---------------------------------------------------------------------------------- # After removing unwanted cells from the dataset, the next step is to normalize the data. sce &lt;- NormalizeData(sce, normalization.method = &quot;LogNormalize&quot;, scale.factor = ncol(sce)) # By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in pbmc[[&quot;RNA&quot;]]@data sce[[&quot;RNA&quot;]]@data[1:20,1:5] #---------------------------------------------------------------------------------- # Step 5: Identification of highly variable features (feature selection) #---------------------------------------------------------------------------------- # We next calculate a subset of features that exhibit high cell-to-cell variation in the dataset sce &lt;- FindVariableFeatures(sce, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(sce), 10) # plot variable features with and without labels pdf(paste0(out.path, &quot;/3.VariableFeaturePlot.pdf&quot;), width = 12, height = 7) plot1 &lt;- VariableFeaturePlot(sce) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 6: Scaling the data #---------------------------------------------------------------------------------- # linear transformation: pre-processing step prior to dimensional reduction techniques like PCA all.genes &lt;- rownames(sce) sce &lt;- ScaleData(sce, features = VariableFeatures(sce)) sce &lt;- RunPCA(sce, features = VariableFeatures(object = sce)) p &lt;- DimPlot(sce, reduction = &quot;pca&quot;) + theme_few() ggsave(paste0(out.path, &quot;/4.PCA.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step 7: Cluster the cells #---------------------------------------------------------------------------------- sce &lt;- FindNeighbors(sce, reduction = &quot;pca&quot;, dims = 1:20) sce &lt;- FindClusters(sce, resolution = 0.8) #---------------------------------------------------------------------------------- # Step 8: Run non-linear dimensional reduction (UMAP/tSNE) #---------------------------------------------------------------------------------- # to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space # If you haven&#39;t installed UMAP, you can do so via reticulate::py_install(packages = # &#39;umap-learn&#39;) sce &lt;- RunTSNE(sce, reduction = &quot;pca&quot;, dims = 1:20, perplexity = 30) sce &lt;- RunUMAP(sce, reduction = &quot;pca&quot;, dims = 1:20) # plot # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.label.pdf&quot;), p, width = 8.5, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.label.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step 9: Cell cycle #---------------------------------------------------------------------------------- # build-in cell cycle genes cc.genes sce &lt;- CellCycleScoring(sce, s.features = cc.genes$s.genes, g2m.features = cc.genes$g2m.genes) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = FALSE, group.by = &quot;Phase&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.phase.pdf&quot;), p, width = 8.5, height = 7) p &lt;- VlnPlot(sce, features = &quot;S.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.S.Score.pdf&quot;), p, width = 10, height = 5) p &lt;- VlnPlot(sce, features = &quot;G2M.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.G2M.Score.pdf&quot;), p, width = 10, height = 5) #---------------------------------------------------------------------------------- # Step 10: SingleR annotation #---------------------------------------------------------------------------------- # first, load reference datasets. Then, annotate your query data based on reference datasets. ref &lt;- readRDS(file = &quot;./data/SingleR/hs.BlueprintEncodeData.RDS&quot;) pred.BlueprintEncodeData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;./data/SingleR/hs.HumanPrimaryCellAtlasData.RDS&quot;) pred.HumanPrimaryCellAtlasData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) ref &lt;- readRDS(file = &quot;./data/SingleR/NovershternHematopoieticData.RDS&quot;) pred.NovershternHematopoieticData &lt;- SingleR(test = sce@assays$RNA@data, ref = ref, labels = ref$label.main) # add annotations to meta data sce@meta.data$CellType.BlueprintEncodeData &lt;- pred.BlueprintEncodeData$labels sce@meta.data$CellType.HumanPrimaryCellAtlasData &lt;- pred.HumanPrimaryCellAtlasData$labels sce@meta.data$CellType.NovershternHematopoieticData &lt;- pred.NovershternHematopoieticData$labels # plot with annotations # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) #---------------------------------------------------------------------------------- # Step 11: Finding differentially expressed features (find marker) #---------------------------------------------------------------------------------- ident.meta &lt;- data.frame(table(sce@meta.data$seurat_clusters)) colnames(ident.meta) &lt;- c(&quot;Cluster&quot;,&quot;CellCount&quot;) write.xlsx(ident.meta, paste0(out.path, &quot;/9.CellCount.xlsx&quot;), overwrite = T) # Cluster CellCount # 1 0 920 # 2 1 875 # 3 2 526 # 4 3 481 # 5 4 472 # 6 5 417 # find marker sce &lt;- BuildClusterTree(object = sce) all.markers &lt;- FindAllMarkers(object = sce, only.pos = TRUE, logfc.threshold = 0.1, min.pct = 0.1) all.markers &lt;- all.markers[which(all.markers$p_val_adj &lt; 0.05 &amp; all.markers$avg_log2FC &gt; 0), ] write.xlsx(all.markers, paste0(out.path, &quot;/10.top.markers.xlsx&quot;), overwrite = T) # plot top 10 markers all.markers &lt;- read.xlsx(paste0(out.path, &quot;/10.top.markers.xlsx&quot;)) all.markers &lt;- all.markers[which(all.markers$pct.1 &gt; 0.25), ] top10 &lt;- all.markers %&gt;% group_by(cluster) %&gt;% top_n(n = 5, wt = avg_log2FC) gene.list &lt;- unique(top10$gene) p &lt;- DotPlot(sce, features = gene.list, dot.scale = 8, cols = c(&quot;#DDDDDD&quot;, &quot;#003366&quot; ), col.min = -2) + RotatedAxis() p &lt;- p + theme_few() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 14)) p &lt;- p + theme(axis.text.y = element_text(size = 20)) p &lt;- p + scale_size(range = c(1, 7)) p &lt;- p + gradient_color(c(&quot;#EEEEEE&quot;,&quot;#ffb459&quot;,&quot;#e8613c&quot;,&quot;#b70909&quot;)) ggsave(paste0(out.path, &quot;/10.top.markers.pdf&quot;), p, width = 20, height = 7) ## marker genes dot plot #---------------------------------------------------------------------------------- # Step 12: check wellknown markers #---------------------------------------------------------------------------------- # Expression for each cluster p &lt;- FeaturePlot(object = sce, features = c(&quot;CD34&quot;,&quot;AVP&quot;,&quot;CD14&quot;,&quot;HBB&quot;,&quot;CD19&quot;,&quot;CD79A&quot;,&quot;CD3E&quot;,&quot;CD8A&quot;,&quot;CD4&quot;), cols = c(&quot;#CCCCCC&quot;, &quot;red&quot;), pt.size = 0.3, ncol = 3, reduction = &quot;umap&quot;) ggsave(paste0(out.path, &quot;/11.featurePlot.pdf&quot;), p, width = 14, height = 12) p &lt;- VlnPlot(object = sce, features = c(&quot;CD34&quot;,&quot;AVP&quot;,&quot;CD14&quot;,&quot;HBB&quot;,&quot;CD19&quot;,&quot;CD79A&quot;,&quot;CD3E&quot;,&quot;CD8A&quot;,&quot;CD4&quot;), pt.size = 0, cols = color.lib, slot = &quot;data&quot;, ncol = 3) ggsave(paste0(out.path, &quot;/11.VlnPlot.pdf&quot;), p, width = 16, height = 10) ## save object dir.create(&quot;./output/obj&quot;,recursive = T) saveRDS(sce, paste0(&quot;./output/obj/20231011.&quot;, sample.name, &quot;.rds&quot;)) 3.3 Integration library(Seurat) library(dplyr) library(Matrix) library(gplots) library(matrixStats) library(ggpubr) library(openxlsx) library(stringr) library(ggthemes) library(pheatmap) library(harmony) library(SingleR) #---------------------------------------------------------------------------------- # Step 1: setting #---------------------------------------------------------------------------------- rm(list = ls()) color.lib &lt;- c(&quot;#E31A1C&quot;, &quot;#55c2fc&quot;, &quot;#A6761D&quot;, &quot;#F1E404&quot;, &quot;#33A02C&quot;, &quot;#1F78B4&quot;, &quot;#FB9A99&quot;, &quot;#FDBF6F&quot;, &quot;#FF7F00&quot;, &quot;#CAB2D6&quot;, &quot;#6A3D9A&quot;, &quot;#F4B3BE&quot;, &quot;#1B9E77&quot;, &quot;#D95F02&quot;, &quot;#7570B3&quot;, &quot;#E7298A&quot;, &quot;#66A61E&quot;, &quot;#E6AB02&quot;, &quot;#F4A11D&quot;, &quot;#8DC8ED&quot;, &quot;#4C6CB0&quot;, &quot;#8A1C1B&quot;, &quot;#CBCC2B&quot;, &quot;#EA644C&quot;, &quot;#634795&quot;, &quot;#005B1D&quot;, &quot;#26418A&quot;, &quot;#CB8A93&quot;, &quot;#B2DF8A&quot;, &quot;#E22826&quot;, &quot;#A6CEE3&quot;, &quot;#F4D31D&quot;, &quot;#F4A11D&quot;, &quot;#82C800&quot;, &quot;#8B5900&quot;, &quot;#858ED1&quot;, &quot;#FF72E1&quot;, &quot;#CB50B2&quot;, &quot;#007D9B&quot;, &quot;#26418A&quot;, &quot;#8B495F&quot;, &quot;#FF394B&quot;) sample.list &lt;- c(&quot;BALL_BM&quot;,&quot;CTRL_BM&quot;) out.path &lt;- &quot;output/merge_BALL_CTRL&quot; dir.create(out.path) # system(sprintf(&quot;mkdir %s&quot;, out.path)) #---------------------------------------------------------------------------------- # Step 2: merge expression profile #---------------------------------------------------------------------------------- exp.data &lt;- NULL meta.data &lt;- NULL for (kkk in 1:length(sample.list)) { message(kkk, &quot; &quot;, sample.list[kkk]) obj.raw &lt;- readRDS(paste0(&quot;./output/obj/20231011.&quot;, sample.list[kkk], &quot;.rds&quot;)) exp.data &lt;- cbind(exp.data, obj.raw@assays$RNA@counts ) meta.data &lt;- rbind(meta.data, obj.raw@meta.data[, c(&quot;Sample&quot;,&quot;CellType.BlueprintEncodeData&quot;,&quot;CellType.HumanPrimaryCellAtlasData&quot;,&quot;CellType.NovershternHematopoieticData&quot;)] ) } #---------------------------------------------------------------------------------- # Step 3: Setup the Seurat Object #---------------------------------------------------------------------------------- sce &lt;- CreateSeuratObject(counts = exp.data, project = &quot;sce&quot;, min.cells = 0, min.features = 0) sce[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(sce, pattern = &quot;^MT-&quot;) sce summary(sce@meta.data$percent.mt) sce@meta.data &lt;- cbind(sce@meta.data, meta.data) #---------------------------------------------------------------------------------- # Step 4: QC #---------------------------------------------------------------------------------- pdf(paste0(out.path, &quot;/1.raw.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), pt.size = 0, group.by = &quot;Sample&quot;, ncol = 3) dev.off() pdf(paste0(out.path, &quot;/1.raw.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() ## QC : selecting cells sce &lt;- subset(sce, subset = nFeature_RNA &gt; 500 &amp; percent.mt &lt; 10 &amp; nCount_RNA &lt; 50000) # plot after QC pdf(paste0(out.path, &quot;/2.filter.vlnplot.pdf&quot;), width = 12, height = 7) VlnPlot(sce, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), pt.size = 0, group.by = &quot;Sample&quot;, ncol = 3) dev.off() pdf(paste0(out.path, &quot;/2.filter.geneplot.pdf&quot;), width = 12, height = 7) plot1 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(sce, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 5: Normalizing the data #---------------------------------------------------------------------------------- sce &lt;- NormalizeData(sce, normalization.method = &quot;LogNormalize&quot;, scale.factor = ncol(sce) ) sce &lt;- FindVariableFeatures(sce, selection.method = &quot;vst&quot;, nfeatures = 2000) #---------------------------------------------------------------------------------- # Step 6: Identification of highly variable features (feature selection) #---------------------------------------------------------------------------------- # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(sce), 10) # plot variable features with and without labels pdf(paste0(out.path, &quot;/3.VariableFeaturePlot.pdf&quot;), width = 12, height = 7) plot1 &lt;- VariableFeaturePlot(sce) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) plot1 + plot2 dev.off() #---------------------------------------------------------------------------------- # Step 7: Scaling the data #---------------------------------------------------------------------------------- all.genes &lt;- rownames(sce) sce &lt;- ScaleData(sce, features = VariableFeatures(sce)) sce &lt;- RunPCA(sce, features = VariableFeatures(object = sce)) p &lt;- DimPlot(sce, reduction = &quot;pca&quot;, group.by = &quot;Sample&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/4.PCA.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step 8: Harmony 批次矫正 #---------------------------------------------------------------------------------- length(VariableFeatures(sce)) sce &lt;- RunHarmony(sce, &quot;Sample&quot;) #---------------------------------------------------------------------------------- # Step 9: Cluster the cells #---------------------------------------------------------------------------------- sce &lt;- FindNeighbors(sce, reduction = &quot;harmony&quot;, dims = 1:20) sce &lt;- FindClusters(sce, resolution = 0.8) #---------------------------------------------------------------------------------- # Step 10: Run non-linear dimensional reduction (UMAP/tSNE) #---------------------------------------------------------------------------------- sce &lt;- RunTSNE(sce, reduction = &quot;harmony&quot;, dims = 1:20, perplexity = 30) sce &lt;- RunUMAP(sce, reduction = &quot;harmony&quot;, dims = 1:20) # plot # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.cluster.label.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, group.by = &quot;Sample&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/5.UMAP.sample.pdf&quot;), p, width = 8.5, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 10, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.cluster.label.pdf&quot;), p, width = 8.5, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, group.by = &quot;Sample&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/6.tSNE.sample.pdf&quot;), p, width = 8.5, height = 7) #---------------------------------------------------------------------------------- # Step11: Cell cycle #---------------------------------------------------------------------------------- cc.genes sce &lt;- CellCycleScoring(sce, s.features = cc.genes$s.genes, g2m.features = cc.genes$g2m.genes) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = FALSE, group.by = &quot;Phase&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.phase.pdf&quot;), p, width = 8.5, height = 7) p &lt;- VlnPlot(sce, features = &quot;S.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.S.Score.pdf&quot;), p, width = 10, height = 5) p &lt;- VlnPlot(sce, features = &quot;G2M.Score&quot;, pt.size = 0, group.by = &quot;seurat_clusters&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/7.CC.score.G2M.Score.pdf&quot;), p, width = 10, height = 5) #---------------------------------------------------------------------------------- # Step 12: Visualization previous SingleR annotation #---------------------------------------------------------------------------------- # umap p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;umap&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.umap.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) # tsne p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.BlueprintEncodeData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.BlueprintEncodeData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.HumanPrimaryCellAtlasData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.HumanPrimaryCellAtlasData.pdf&quot;), p, width = 9, height = 7) p &lt;- DimPlot(sce, reduction = &quot;tsne&quot;, pt.size = 1, label = TRUE, label.size = 4, group.by = &quot;CellType.NovershternHematopoieticData&quot;, cols = color.lib) + theme_few() ggsave(paste0(out.path, &quot;/8.SingleR.tsne.NovershternHematopoieticData.pdf&quot;), p, width = 9, height = 7) #---------------------------------------------------------------------------------- # Step 13: Finding differentially expressed features (find marker) #---------------------------------------------------------------------------------- ident.meta &lt;- data.frame(table(sce@meta.data$seurat_clusters)) colnames(ident.meta) &lt;- c(&quot;Cluster&quot;,&quot;CellCount&quot;) write.xlsx(ident.meta, paste0(out.path, &quot;/9.CellCount.xlsx&quot;), overwrite = T) # Cluster CellCount # 1 0 2201 # 2 1 1385 # 3 2 1096 # 4 3 648 # 5 4 547 # 6 5 545 # find marker sce &lt;- BuildClusterTree(object = sce) # PlotClusterTree(sce) all.markers &lt;- FindAllMarkers(object = sce, only.pos = TRUE, logfc.threshold = 0.1, min.pct = 0.1) all.markers &lt;- all.markers[which(all.markers$p_val_adj &lt; 0.05 &amp; all.markers$avg_log2FC &gt; 0), ] write.xlsx(all.markers, paste0(out.path, &quot;/10.top.markers.xlsx&quot;), overwrite = T) # plot top 10 markers all.markers &lt;- read.xlsx(paste0(out.path, &quot;/10.top.markers.xlsx&quot;)) all.markers &lt;- all.markers[which(all.markers$pct.1 &gt; 0.25), ] top10 &lt;- all.markers %&gt;% group_by(cluster) %&gt;% top_n(n = 5, wt = avg_log2FC) gene.list &lt;- unique(top10$gene) p &lt;- DotPlot(sce, features = gene.list, dot.scale = 8, cols = c(&quot;#DDDDDD&quot;, &quot;#003366&quot; ), col.min = -2) + RotatedAxis() p &lt;- p + theme_few() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 14)) p &lt;- p + theme(axis.text.y = element_text(size = 20)) p &lt;- p + scale_size(range = c(1, 7)) p &lt;- p + gradient_color(c(&quot;#EEEEEE&quot;,&quot;#ffb459&quot;,&quot;#e8613c&quot;,&quot;#b70909&quot;)) ggsave(paste0(out.path, &quot;/10.top.markers.pdf&quot;), p, width = 20, height = 7) #---------------------------------------------------------------------------------- # Step 14: check wellknown markers #---------------------------------------------------------------------------------- # Expression for each cluster p &lt;- FeaturePlot(object = sce, features = c(&quot;CD34&quot;,&quot;CD19&quot;,&quot;CD3E&quot;), cols = c(&quot;#CCCCCC&quot;, &quot;red&quot;), pt.size = 0.5, ncol = 3, reduction = &quot;umap&quot;) ggsave(paste0(out.path, &quot;/11.featurePlot.pdf&quot;), p, width = 14, height = 4) p &lt;- VlnPlot(object = sce, features = c(&quot;CD34&quot;,&quot;CD19&quot;,&quot;CD3E&quot;), pt.size = 0, cols = color.lib, slot = &quot;data&quot;, ncol = 3) ggsave(paste0(out.path, &quot;/11.VlnPlot.pdf&quot;), p, width = 16, height = 4) ## Percentage summary ident.meta &lt;- data.frame(sce@meta.data) ident.info.meta &lt;- table(ident.meta[, c(&quot;seurat_clusters&quot;, &quot;Sample&quot;)]) ident.info.per &lt;- ident.info.meta # seurat_clusters BALL_BM CTRL_BM # 0 1327 874 # 1 1381 4 # 2 466 630 # 3 350 298 # 4 13 534 plot.data &lt;- NULL for (i in 1:ncol(ident.info.meta)) { plot.data.sub &lt;- as.data.frame(ident.info.meta[, i]) colnames(plot.data.sub)[1] = &quot;CellCount&quot; plot.data.sub$Percentage &lt;- plot.data.sub$CellCount / sum(plot.data.sub$CellCount) * 100 plot.data.sub$CellType &lt;- rownames(plot.data.sub) plot.data.sub$Sample &lt;- colnames(ident.info.meta)[i] plot.data &lt;- rbind(plot.data, plot.data.sub) ident.info.per[, i] &lt;- ident.info.per[, i]/sum(ident.info.per[, i])*100 } # seurat_clusters BALL_BM CTRL_BM # 0 27.47412008 20.85918854 # 1 28.59213251 0.09546539 # 2 9.64803313 15.03579952 # 3 7.24637681 7.11217184 # 4 0.26915114 12.74463007 # 5 7.39130435 4.48687351 write.xlsx(list(Count = ident.info.meta, Percent = ident.info.per), paste0(out.path, &quot;/12.cluster.percentage.xlsx&quot;), rowNames = T, overwrite = T) ## plot order = colnames(ident.info.meta) p &lt;- ggbarplot(plot.data, x = &quot;Sample&quot;, y = &quot;Percentage&quot;, fill = &quot;CellType&quot;, color = &quot;CellType&quot;, width = 0.7, palette = color.lib, size = 0, legend = &quot;right&quot;, xlab = &quot;&quot;, ylab = &quot;Cell Percentage (%)&quot;, order = order ) p &lt;- p + theme_few() p &lt;- p + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 14, color = &quot;black&quot;)) ggsave(paste0(out.path, &quot;/12.cluster.Percentage.pdf&quot;), p, width = 4, height = 7) p &lt;- ggbarplot(plot.data, x = &quot;Sample&quot;, y = &quot;CellCount&quot;, fill = &quot;CellType&quot;, color = &quot;CellType&quot;, width = 0.7, palette = color.lib, size = 0, legend = &quot;right&quot;, xlab = &quot;&quot;, ylab = &quot;Cell Count&quot;, order = order ) p &lt;- p + theme_few() p &lt;- p + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 14, color = &quot;black&quot;)) ggsave(paste0(out.path, &quot;/12.cluster.Count.pdf&quot;), p, width = 4, height = 7) ## save object dir.create(&quot;./output/obj&quot;,recursive = T) saveRDS(sce, paste0(&quot;./output/obj/20231011.&quot;, &quot;merge_BALL_CTRL&quot;, &quot;.rds&quot;)) "],["others.html", "Chapter 4 Others 4.1 R Session info 4.2 Reference", " Chapter 4 Others 4.1 R Session info # Show session information sessionInfo() ## R version 4.2.3 (2023-03-15) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.6.8 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] knitr_1.44 SingleR_2.0.0 SummarizedExperiment_1.28.0 ## [4] Biobase_2.58.0 GenomicRanges_1.50.2 GenomeInfoDb_1.34.9 ## [7] IRanges_2.32.0 S4Vectors_0.36.2 BiocGenerics_0.44.0 ## [10] MatrixGenerics_1.10.0 harmony_1.1.0 Rcpp_1.0.11 ## [13] pheatmap_1.0.12 ggthemes_4.2.4 stringr_1.5.0 ## [16] openxlsx_4.2.5.2 ggpubr_0.6.0 ggplot2_3.4.4 ## [19] matrixStats_1.0.0 gplots_3.1.3 Matrix_1.6-1 ## [22] dplyr_1.1.3 SeuratObject_4.1.4 Seurat_4.4.0 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.4 spatstat.explore_3.2-5 reticulate_1.34.0 ## [4] tidyselect_1.2.0 htmlwidgets_1.6.2 grid_4.2.3 ## [7] BiocParallel_1.32.6 Rtsne_0.16 munsell_0.5.0 ## [10] ScaledMatrix_1.6.0 codetools_0.2-19 ragg_1.2.6 ## [13] ica_1.0-3 future_1.33.0 miniUI_0.1.1.1 ## [16] withr_2.5.1 spatstat.random_3.2-1 colorspace_2.1-0 ## [19] progressr_0.14.0 rstudioapi_0.15.0 ROCR_1.0-11 ## [22] ggsignif_0.6.4 tensor_1.5 listenv_0.9.0 ## [25] labeling_0.4.3 GenomeInfoDbData_1.2.9 polyclip_1.10-6 ## [28] farver_2.1.1 parallelly_1.36.0 vctrs_0.6.4 ## [31] generics_0.1.3 xfun_0.40 R6_2.5.1 ## [34] ggbeeswarm_0.7.2 rsvd_1.0.5 cachem_1.0.8 ## [37] bitops_1.0-7 spatstat.utils_3.0-3 DelayedArray_0.24.0 ## [40] promises_1.2.1 scales_1.2.1 beeswarm_0.4.0 ## [43] gtable_0.3.4 beachmat_2.14.2 globals_0.16.2 ## [46] goftest_1.2-3 rlang_1.1.1 systemfonts_1.0.5 ## [49] splines_4.2.3 rstatix_0.7.2 lazyeval_0.2.2 ## [52] spatstat.geom_3.2-7 broom_1.0.5 yaml_2.3.7 ## [55] reshape2_1.4.4 abind_1.4-5 backports_1.4.1 ## [58] httpuv_1.6.12 tools_4.2.3 bookdown_0.36 ## [61] ellipsis_0.3.2 jquerylib_0.1.4 RColorBrewer_1.1-3 ## [64] ggridges_0.5.4 plyr_1.8.9 sparseMatrixStats_1.10.0 ## [67] zlibbioc_1.44.0 purrr_1.0.2 RCurl_1.98-1.12 ## [70] deldir_1.0-9 pbapply_1.7-2 cowplot_1.1.1 ## [73] zoo_1.8-12 ggrepel_0.9.4 cluster_2.1.4 ## [76] magrittr_2.0.3 data.table_1.14.8 scattermore_1.2 ## [79] lmtest_0.9-40 RANN_2.6.1 fitdistrplus_1.1-11 ## [82] patchwork_1.1.3 mime_0.12 evaluate_0.22 ## [85] xtable_1.8-4 RhpcBLASctl_0.23-42 gridExtra_2.3 ## [88] compiler_4.2.3 tibble_3.2.1 KernSmooth_2.23-22 ## [91] htmltools_0.5.6.1 later_1.3.1 tidyr_1.3.0 ## [94] MASS_7.3-60 car_3.1-2 cli_3.6.1 ## [97] parallel_4.2.3 igraph_1.5.1 pkgconfig_2.0.3 ## [100] sp_2.1-1 plotly_4.10.3 spatstat.sparse_3.0-2 ## [103] vipor_0.4.5 bslib_0.5.1 XVector_0.38.0 ## [106] digest_0.6.33 sctransform_0.4.1 RcppAnnoy_0.0.21 ## [109] spatstat.data_3.0-1 rmarkdown_2.25 leiden_0.4.3 ## [112] uwot_0.1.16 DelayedMatrixStats_1.20.0 shiny_1.7.5.1 ## [115] gtools_3.9.4 lifecycle_1.0.3 nlme_3.1-163 ## [118] jsonlite_1.8.7 carData_3.0-5 viridisLite_0.4.2 ## [121] limma_3.54.2 fansi_1.0.5 pillar_1.9.0 ## [124] lattice_0.22-4 ggrastr_1.0.2 fastmap_1.1.1 ## [127] httr_1.4.7 survival_3.5-7 glue_1.6.2 ## [130] zip_2.3.0 png_0.1-8 sass_0.4.7 ## [133] stringi_1.7.12 textshaping_0.3.7 BiocSingular_1.14.0 ## [136] caTools_1.18.2 irlba_2.3.5.1 future.apply_1.11.0 ## [139] ape_5.7-1 4.2 Reference Seurat SingleR harmony "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
